/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmpDedHistoryEffectiveChangeDate } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeDeductionHistoryEffectiveDateApi - axios parameter creator
 * @export
 */
export const EmployeeDeductionHistoryEffectiveDateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br>   fieldName is a required parameter that takes one of the following:    <ul>    <li>changeReason</li>    <li>benefitStartDate</li>    <li>benefitStopDate</li>    <li>benefitOption</li>    <li>employeeAmount</li>    <li>employeeBenefitAmount</li>    <li>employeeGoalAmount</li>    <li>eoiDesiredAmount</li>    <li>eoiDesiredCalcRateOrPercent</li>    <li>declinedByCarrier</li>    <li>declinedByCarrierReason</li>    <li>waiveReason</li>    <li>deductionStartDate</li>    <li>deductionStopDate</li>    </ul>    sessionDate is an optional parameter that defaults to today\'s date if null.</br>   deductionCode is a required parameter that takes a list of codes [ded1,ded2].</br>   CompanyId is an optional parameter that takes a list of IDs [coid1,coid2].</br>       Correct syntax when using parameters are as follows:   <ul>     <li>Get deductions history change date by single deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode}</li>     </ul>     </li>  <li>Get deductions history change date by multiple deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}</li>    </ul>     </li>    <li>Get deductions history change date multiple deduction code with multiple company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}&companyId={companyId1,companyId1}</li>    </ul>     </li>    <li>Get deductions history change date by sessionDate,deduction code and company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&sessionDate={sessionDate}deductionCode={deductionCode}&companyId={companyId}</li>    </ul>     </li>  <li>Get deductions history change date per page    <ul>    <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&page=1&per_page=100</li>     </ul>    </li>  </ul> 
         * @summary Deductions History Effective Change Date
         * @param {string} fieldName 
         * @param {string} deductionCode 
         * @param {string} [companyId] 
         * @param {string} [sessionDate] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDeductionCodeAndField: async (fieldName: string, deductionCode: string, companyId?: string, sessionDate?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fieldName' is not null or undefined
            assertParamExists('getByDeductionCodeAndField', 'fieldName', fieldName)
            // verify required parameter 'deductionCode' is not null or undefined
            assertParamExists('getByDeductionCodeAndField', 'deductionCode', deductionCode)
            const localVarPath = `/personnel/v1/deduction-history-effective-change-dates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (sessionDate !== undefined) {
                localVarQueryParameter['sessionDate'] = (sessionDate as any instanceof Date) ?
                    (sessionDate as any).toISOString() :
                    sessionDate;
            }

            if (fieldName !== undefined) {
                localVarQueryParameter['fieldName'] = fieldName;
            }

            if (deductionCode !== undefined) {
                localVarQueryParameter['deductionCode'] = deductionCode;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/deduction-history-effective-change-dates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeDeductionHistoryEffectiveDateApi - functional programming interface
 * @export
 */
export const EmployeeDeductionHistoryEffectiveDateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeDeductionHistoryEffectiveDateApiAxiosParamCreator(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br>   fieldName is a required parameter that takes one of the following:    <ul>    <li>changeReason</li>    <li>benefitStartDate</li>    <li>benefitStopDate</li>    <li>benefitOption</li>    <li>employeeAmount</li>    <li>employeeBenefitAmount</li>    <li>employeeGoalAmount</li>    <li>eoiDesiredAmount</li>    <li>eoiDesiredCalcRateOrPercent</li>    <li>declinedByCarrier</li>    <li>declinedByCarrierReason</li>    <li>waiveReason</li>    <li>deductionStartDate</li>    <li>deductionStopDate</li>    </ul>    sessionDate is an optional parameter that defaults to today\'s date if null.</br>   deductionCode is a required parameter that takes a list of codes [ded1,ded2].</br>   CompanyId is an optional parameter that takes a list of IDs [coid1,coid2].</br>       Correct syntax when using parameters are as follows:   <ul>     <li>Get deductions history change date by single deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode}</li>     </ul>     </li>  <li>Get deductions history change date by multiple deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}</li>    </ul>     </li>    <li>Get deductions history change date multiple deduction code with multiple company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}&companyId={companyId1,companyId1}</li>    </ul>     </li>    <li>Get deductions history change date by sessionDate,deduction code and company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&sessionDate={sessionDate}deductionCode={deductionCode}&companyId={companyId}</li>    </ul>     </li>  <li>Get deductions history change date per page    <ul>    <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&page=1&per_page=100</li>     </ul>    </li>  </ul> 
         * @summary Deductions History Effective Change Date
         * @param {EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByDeductionCodeAndField(requestParameters: EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpDedHistoryEffectiveChangeDate>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByDeductionCodeAndField(requestParameters.fieldName, requestParameters.deductionCode, requestParameters.companyId, requestParameters.sessionDate, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeDeductionHistoryEffectiveDateApi - factory interface
 * @export
 */
export const EmployeeDeductionHistoryEffectiveDateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeDeductionHistoryEffectiveDateApiFp(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br>   fieldName is a required parameter that takes one of the following:    <ul>    <li>changeReason</li>    <li>benefitStartDate</li>    <li>benefitStopDate</li>    <li>benefitOption</li>    <li>employeeAmount</li>    <li>employeeBenefitAmount</li>    <li>employeeGoalAmount</li>    <li>eoiDesiredAmount</li>    <li>eoiDesiredCalcRateOrPercent</li>    <li>declinedByCarrier</li>    <li>declinedByCarrierReason</li>    <li>waiveReason</li>    <li>deductionStartDate</li>    <li>deductionStopDate</li>    </ul>    sessionDate is an optional parameter that defaults to today\'s date if null.</br>   deductionCode is a required parameter that takes a list of codes [ded1,ded2].</br>   CompanyId is an optional parameter that takes a list of IDs [coid1,coid2].</br>       Correct syntax when using parameters are as follows:   <ul>     <li>Get deductions history change date by single deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode}</li>     </ul>     </li>  <li>Get deductions history change date by multiple deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}</li>    </ul>     </li>    <li>Get deductions history change date multiple deduction code with multiple company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}&companyId={companyId1,companyId1}</li>    </ul>     </li>    <li>Get deductions history change date by sessionDate,deduction code and company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&sessionDate={sessionDate}deductionCode={deductionCode}&companyId={companyId}</li>    </ul>     </li>  <li>Get deductions history change date per page    <ul>    <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&page=1&per_page=100</li>     </ul>    </li>  </ul> 
         * @summary Deductions History Effective Change Date
         * @param {EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDeductionCodeAndField(requestParameters: EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmpDedHistoryEffectiveChangeDate>> {
            return localVarFp.getByDeductionCodeAndField(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByDeductionCodeAndField operation in EmployeeDeductionHistoryEffectiveDateApi.
 * @export
 * @interface EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest
 */
export type EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndField
    */
    readonly fieldName: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndField
    */
    readonly deductionCode: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndField
    */
    readonly companyId?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndField
    */
    readonly sessionDate?: string
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndField
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndField
    */
    readonly perPage?: number
    
}

/**
 * EmployeeDeductionHistoryEffectiveDateApiGenerated - object-oriented interface
 * @export
 * @class EmployeeDeductionHistoryEffectiveDateApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeDeductionHistoryEffectiveDateApiGenerated extends BaseAPI {
    /**
     * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br>   fieldName is a required parameter that takes one of the following:    <ul>    <li>changeReason</li>    <li>benefitStartDate</li>    <li>benefitStopDate</li>    <li>benefitOption</li>    <li>employeeAmount</li>    <li>employeeBenefitAmount</li>    <li>employeeGoalAmount</li>    <li>eoiDesiredAmount</li>    <li>eoiDesiredCalcRateOrPercent</li>    <li>declinedByCarrier</li>    <li>declinedByCarrierReason</li>    <li>waiveReason</li>    <li>deductionStartDate</li>    <li>deductionStopDate</li>    </ul>    sessionDate is an optional parameter that defaults to today\'s date if null.</br>   deductionCode is a required parameter that takes a list of codes [ded1,ded2].</br>   CompanyId is an optional parameter that takes a list of IDs [coid1,coid2].</br>       Correct syntax when using parameters are as follows:   <ul>     <li>Get deductions history change date by single deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode}</li>     </ul>     </li>  <li>Get deductions history change date by multiple deduction code     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}</li>    </ul>     </li>    <li>Get deductions history change date multiple deduction code with multiple company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&deductionCode={dedCode1,dedCode2}&companyId={companyId1,companyId1}</li>    </ul>     </li>    <li>Get deductions history change date by sessionDate,deduction code and company     <ul>     <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&sessionDate={sessionDate}deductionCode={deductionCode}&companyId={companyId}</li>    </ul>     </li>  <li>Get deductions history change date per page    <ul>    <li>Example: /personnel/v1/deduction-history-effective-change-dates?fieldName={fieldName}&page=1&per_page=100</li>     </ul>    </li>  </ul> 
     * @summary Deductions History Effective Change Date
     * @param {EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeDeductionHistoryEffectiveDateApiGenerated
     */
    public getByDeductionCodeAndField(requestParameters: EmployeeDeductionHistoryEffectiveDateApiGetByDeductionCodeAndFieldRequest, options?: AxiosRequestConfig) {
        return EmployeeDeductionHistoryEffectiveDateApiFp(this.configuration).getByDeductionCodeAndField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
