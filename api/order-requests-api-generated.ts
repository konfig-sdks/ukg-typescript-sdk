/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { Output } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrderRequestsApi - axios parameter creator
 * @export
 */
export const OrderRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Background Check Order Request with Candidate, Application, and Opportunity info
         * @summary Background Check Details
         * @param {string} token A temporary Background Check Request tokena ssociated with the background check request that has been previously provided in the Background Check Request Redirect URL
         * @param {string} tenantAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backgroundCheckDetails: async (token: string, tenantAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            assertParamExists('backgroundCheckDetails', 'token', token)
            // verify required parameter 'tenantAlias' is not null or undefined
            assertParamExists('backgroundCheckDetails', 'tenantAlias', tenantAlias)
            const localVarPath = `/{tenant-alias}/api/background-check-order-requests`
                .replace(`{${"tenant-alias"}}`, encodeURIComponent(String(tenantAlias !== undefined ? tenantAlias : `-tenant-alias-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{tenant-alias}/api/background-check-order-requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderRequestsApi - functional programming interface
 * @export
 */
export const OrderRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * Background Check Order Request with Candidate, Application, and Opportunity info
         * @summary Background Check Details
         * @param {OrderRequestsApiBackgroundCheckDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async backgroundCheckDetails(requestParameters: OrderRequestsApiBackgroundCheckDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Output>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.backgroundCheckDetails(requestParameters.token, requestParameters.tenantAlias, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderRequestsApi - factory interface
 * @export
 */
export const OrderRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderRequestsApiFp(configuration)
    return {
        /**
         * Background Check Order Request with Candidate, Application, and Opportunity info
         * @summary Background Check Details
         * @param {OrderRequestsApiBackgroundCheckDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        backgroundCheckDetails(requestParameters: OrderRequestsApiBackgroundCheckDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Output> {
            return localVarFp.backgroundCheckDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for backgroundCheckDetails operation in OrderRequestsApi.
 * @export
 * @interface OrderRequestsApiBackgroundCheckDetailsRequest
 */
export type OrderRequestsApiBackgroundCheckDetailsRequest = {
    
    /**
    * A temporary Background Check Request tokena ssociated with the background check request that has been previously provided in the Background Check Request Redirect URL
    * @type {string}
    * @memberof OrderRequestsApiBackgroundCheckDetails
    */
    readonly token: string
    
    /**
    * 
    * @type {string}
    * @memberof OrderRequestsApiBackgroundCheckDetails
    */
    readonly tenantAlias: string
    
}

/**
 * OrderRequestsApiGenerated - object-oriented interface
 * @export
 * @class OrderRequestsApiGenerated
 * @extends {BaseAPI}
 */
export class OrderRequestsApiGenerated extends BaseAPI {
    /**
     * Background Check Order Request with Candidate, Application, and Opportunity info
     * @summary Background Check Details
     * @param {OrderRequestsApiBackgroundCheckDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderRequestsApiGenerated
     */
    public backgroundCheckDetails(requestParameters: OrderRequestsApiBackgroundCheckDetailsRequest, options?: AxiosRequestConfig) {
        return OrderRequestsApiFp(this.configuration).backgroundCheckDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
