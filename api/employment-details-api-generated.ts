/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmpEmploymentDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmploymentDetailsApi - axios parameter creator
 * @export
 */
export const EmploymentDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a single employment detail by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {string} companyId 
         * @param {string} employeeId 
         * @param {string} [companyId2] 
         * @param {string} [employeeId2] 
         * @param {string} [primaryJobCode] 
         * @param {string} [jobTitle] 
         * @param {string} [fullTimeOrPartTimeCode] 
         * @param {string} [primaryWorkLocationCode] 
         * @param {string} [primaryProjectCode] 
         * @param {string} [deductionGroupCode] 
         * @param {string} [earningGroupCode] 
         * @param {string} [employeeTypeCode] 
         * @param {string} [employeeStatusCode] 
         * @param {string} [employeeNumber] 
         * @param {string} [supervisorID] 
         * @param {string} [originalHireDate] 
         * @param {string} [lastHireDate] 
         * @param {string} [dateOfTermination] 
         * @param {string} [dateOfRetirement] 
         * @param {string} [dateTimeCreated] 
         * @param {string} [dateTimeChanged] 
         * @param {string} [dateLastPayDatePaid] 
         * @param {string} [payGroup] 
         * @param {boolean} [isHomeCompany] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCompanyIdAndEmployeeId: async (companyId: string, employeeId: string, companyId2?: string, employeeId2?: string, primaryJobCode?: string, jobTitle?: string, fullTimeOrPartTimeCode?: string, primaryWorkLocationCode?: string, primaryProjectCode?: string, deductionGroupCode?: string, earningGroupCode?: string, employeeTypeCode?: string, employeeStatusCode?: string, employeeNumber?: string, supervisorID?: string, originalHireDate?: string, lastHireDate?: string, dateOfTermination?: string, dateOfRetirement?: string, dateTimeCreated?: string, dateTimeChanged?: string, dateLastPayDatePaid?: string, payGroup?: string, isHomeCompany?: boolean, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getByCompanyIdAndEmployeeId', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByCompanyIdAndEmployeeId', 'employeeId', employeeId)
            const localVarPath = `/personnel/v1/companies/{companyId}/employees/{employeeId}/employment-details`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId2 !== undefined) {
                localVarQueryParameter['companyId'] = companyId2;
            }

            if (employeeId2 !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId2;
            }

            if (primaryJobCode !== undefined) {
                localVarQueryParameter['primaryJobCode'] = primaryJobCode;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }

            if (fullTimeOrPartTimeCode !== undefined) {
                localVarQueryParameter['fullTimeOrPartTimeCode'] = fullTimeOrPartTimeCode;
            }

            if (primaryWorkLocationCode !== undefined) {
                localVarQueryParameter['primaryWorkLocationCode'] = primaryWorkLocationCode;
            }

            if (primaryProjectCode !== undefined) {
                localVarQueryParameter['primaryProjectCode'] = primaryProjectCode;
            }

            if (deductionGroupCode !== undefined) {
                localVarQueryParameter['deductionGroupCode'] = deductionGroupCode;
            }

            if (earningGroupCode !== undefined) {
                localVarQueryParameter['earningGroupCode'] = earningGroupCode;
            }

            if (employeeTypeCode !== undefined) {
                localVarQueryParameter['employeeTypeCode'] = employeeTypeCode;
            }

            if (employeeStatusCode !== undefined) {
                localVarQueryParameter['employeeStatusCode'] = employeeStatusCode;
            }

            if (employeeNumber !== undefined) {
                localVarQueryParameter['employeeNumber'] = employeeNumber;
            }

            if (supervisorID !== undefined) {
                localVarQueryParameter['supervisorID'] = supervisorID;
            }

            if (originalHireDate !== undefined) {
                localVarQueryParameter['originalHireDate'] = originalHireDate;
            }

            if (lastHireDate !== undefined) {
                localVarQueryParameter['lastHireDate'] = lastHireDate;
            }

            if (dateOfTermination !== undefined) {
                localVarQueryParameter['dateOfTermination'] = dateOfTermination;
            }

            if (dateOfRetirement !== undefined) {
                localVarQueryParameter['dateOfRetirement'] = dateOfRetirement;
            }

            if (dateTimeCreated !== undefined) {
                localVarQueryParameter['dateTimeCreated'] = dateTimeCreated;
            }

            if (dateTimeChanged !== undefined) {
                localVarQueryParameter['dateTimeChanged'] = dateTimeChanged;
            }

            if (dateLastPayDatePaid !== undefined) {
                localVarQueryParameter['dateLastPayDatePaid'] = dateLastPayDatePaid;
            }

            if (payGroup !== undefined) {
                localVarQueryParameter['payGroup'] = payGroup;
            }

            if (isHomeCompany !== undefined) {
                localVarQueryParameter['isHomeCompany'] = isHomeCompany;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/companies/{companyId}/employees/{employeeId}/employment-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all employment record details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {string} [companyId] 
         * @param {string} [employeeId] 
         * @param {string} [primaryJobCode] 
         * @param {string} [jobTitle] 
         * @param {string} [fullTimeOrPartTimeCode] 
         * @param {string} [primaryWorkLocationCode] 
         * @param {string} [primaryProjectCode] 
         * @param {string} [deductionGroupCode] 
         * @param {string} [earningGroupCode] 
         * @param {string} [employeeTypeCode] 
         * @param {string} [employeeStatusCode] 
         * @param {string} [employeeNumber] 
         * @param {string} [supervisorID] 
         * @param {string} [originalHireDate] 
         * @param {string} [lastHireDate] 
         * @param {string} [dateOfTermination] 
         * @param {string} [dateOfRetirement] 
         * @param {string} [dateTimeCreated] 
         * @param {string} [dateTimeChanged] 
         * @param {string} [dateLastPayDatePaid] 
         * @param {string} [payGroup] 
         * @param {boolean} [isHomeCompany] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyId?: string, employeeId?: string, primaryJobCode?: string, jobTitle?: string, fullTimeOrPartTimeCode?: string, primaryWorkLocationCode?: string, primaryProjectCode?: string, deductionGroupCode?: string, earningGroupCode?: string, employeeTypeCode?: string, employeeStatusCode?: string, employeeNumber?: string, supervisorID?: string, originalHireDate?: string, lastHireDate?: string, dateOfTermination?: string, dateOfRetirement?: string, dateTimeCreated?: string, dateTimeChanged?: string, dateLastPayDatePaid?: string, payGroup?: string, isHomeCompany?: boolean, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personnel/v1/employment-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (primaryJobCode !== undefined) {
                localVarQueryParameter['primaryJobCode'] = primaryJobCode;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }

            if (fullTimeOrPartTimeCode !== undefined) {
                localVarQueryParameter['fullTimeOrPartTimeCode'] = fullTimeOrPartTimeCode;
            }

            if (primaryWorkLocationCode !== undefined) {
                localVarQueryParameter['primaryWorkLocationCode'] = primaryWorkLocationCode;
            }

            if (primaryProjectCode !== undefined) {
                localVarQueryParameter['primaryProjectCode'] = primaryProjectCode;
            }

            if (deductionGroupCode !== undefined) {
                localVarQueryParameter['deductionGroupCode'] = deductionGroupCode;
            }

            if (earningGroupCode !== undefined) {
                localVarQueryParameter['earningGroupCode'] = earningGroupCode;
            }

            if (employeeTypeCode !== undefined) {
                localVarQueryParameter['employeeTypeCode'] = employeeTypeCode;
            }

            if (employeeStatusCode !== undefined) {
                localVarQueryParameter['employeeStatusCode'] = employeeStatusCode;
            }

            if (employeeNumber !== undefined) {
                localVarQueryParameter['employeeNumber'] = employeeNumber;
            }

            if (supervisorID !== undefined) {
                localVarQueryParameter['supervisorID'] = supervisorID;
            }

            if (originalHireDate !== undefined) {
                localVarQueryParameter['originalHireDate'] = originalHireDate;
            }

            if (lastHireDate !== undefined) {
                localVarQueryParameter['lastHireDate'] = lastHireDate;
            }

            if (dateOfTermination !== undefined) {
                localVarQueryParameter['dateOfTermination'] = dateOfTermination;
            }

            if (dateOfRetirement !== undefined) {
                localVarQueryParameter['dateOfRetirement'] = dateOfRetirement;
            }

            if (dateTimeCreated !== undefined) {
                localVarQueryParameter['dateTimeCreated'] = dateTimeCreated;
            }

            if (dateTimeChanged !== undefined) {
                localVarQueryParameter['dateTimeChanged'] = dateTimeChanged;
            }

            if (dateLastPayDatePaid !== undefined) {
                localVarQueryParameter['dateLastPayDatePaid'] = dateLastPayDatePaid;
            }

            if (payGroup !== undefined) {
                localVarQueryParameter['payGroup'] = payGroup;
            }

            if (isHomeCompany !== undefined) {
                localVarQueryParameter['isHomeCompany'] = isHomeCompany;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/employment-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all employment record details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {string} companyId 
         * @param {string} [companyId2] 
         * @param {string} [employeeId] 
         * @param {string} [primaryJobCode] 
         * @param {string} [jobTitle] 
         * @param {string} [fullTimeOrPartTimeCode] 
         * @param {string} [primaryWorkLocationCode] 
         * @param {string} [primaryProjectCode] 
         * @param {string} [deductionGroupCode] 
         * @param {string} [earningGroupCode] 
         * @param {string} [employeeTypeCode] 
         * @param {string} [employeeStatusCode] 
         * @param {string} [employeeNumber] 
         * @param {string} [supervisorID] 
         * @param {string} [originalHireDate] 
         * @param {string} [lastHireDate] 
         * @param {string} [dateOfTermination] 
         * @param {string} [dateOfRetirement] 
         * @param {string} [dateTimeCreated] 
         * @param {string} [dateTimeChanged] 
         * @param {string} [dateLastPayDatePaid] 
         * @param {string} [payGroup] 
         * @param {boolean} [isHomeCompany] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByCompany: async (companyId: string, companyId2?: string, employeeId?: string, primaryJobCode?: string, jobTitle?: string, fullTimeOrPartTimeCode?: string, primaryWorkLocationCode?: string, primaryProjectCode?: string, deductionGroupCode?: string, earningGroupCode?: string, employeeTypeCode?: string, employeeStatusCode?: string, employeeNumber?: string, supervisorID?: string, originalHireDate?: string, lastHireDate?: string, dateOfTermination?: string, dateOfRetirement?: string, dateTimeCreated?: string, dateTimeChanged?: string, dateLastPayDatePaid?: string, payGroup?: string, isHomeCompany?: boolean, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('listByCompany', 'companyId', companyId)
            const localVarPath = `/personnel/v1/companies/{companyId}/employment-details`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId2 !== undefined) {
                localVarQueryParameter['companyId'] = companyId2;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (primaryJobCode !== undefined) {
                localVarQueryParameter['primaryJobCode'] = primaryJobCode;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }

            if (fullTimeOrPartTimeCode !== undefined) {
                localVarQueryParameter['fullTimeOrPartTimeCode'] = fullTimeOrPartTimeCode;
            }

            if (primaryWorkLocationCode !== undefined) {
                localVarQueryParameter['primaryWorkLocationCode'] = primaryWorkLocationCode;
            }

            if (primaryProjectCode !== undefined) {
                localVarQueryParameter['primaryProjectCode'] = primaryProjectCode;
            }

            if (deductionGroupCode !== undefined) {
                localVarQueryParameter['deductionGroupCode'] = deductionGroupCode;
            }

            if (earningGroupCode !== undefined) {
                localVarQueryParameter['earningGroupCode'] = earningGroupCode;
            }

            if (employeeTypeCode !== undefined) {
                localVarQueryParameter['employeeTypeCode'] = employeeTypeCode;
            }

            if (employeeStatusCode !== undefined) {
                localVarQueryParameter['employeeStatusCode'] = employeeStatusCode;
            }

            if (employeeNumber !== undefined) {
                localVarQueryParameter['employeeNumber'] = employeeNumber;
            }

            if (supervisorID !== undefined) {
                localVarQueryParameter['supervisorID'] = supervisorID;
            }

            if (originalHireDate !== undefined) {
                localVarQueryParameter['originalHireDate'] = originalHireDate;
            }

            if (lastHireDate !== undefined) {
                localVarQueryParameter['lastHireDate'] = lastHireDate;
            }

            if (dateOfTermination !== undefined) {
                localVarQueryParameter['dateOfTermination'] = dateOfTermination;
            }

            if (dateOfRetirement !== undefined) {
                localVarQueryParameter['dateOfRetirement'] = dateOfRetirement;
            }

            if (dateTimeCreated !== undefined) {
                localVarQueryParameter['dateTimeCreated'] = dateTimeCreated;
            }

            if (dateTimeChanged !== undefined) {
                localVarQueryParameter['dateTimeChanged'] = dateTimeChanged;
            }

            if (dateLastPayDatePaid !== undefined) {
                localVarQueryParameter['dateLastPayDatePaid'] = dateLastPayDatePaid;
            }

            if (payGroup !== undefined) {
                localVarQueryParameter['payGroup'] = payGroup;
            }

            if (isHomeCompany !== undefined) {
                localVarQueryParameter['isHomeCompany'] = isHomeCompany;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/companies/{companyId}/employment-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmploymentDetailsApi - functional programming interface
 * @export
 */
export const EmploymentDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmploymentDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a single employment detail by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCompanyIdAndEmployeeId(requestParameters: EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpEmploymentDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCompanyIdAndEmployeeId(requestParameters.companyId, requestParameters.employeeId, requestParameters.companyId2, requestParameters.employeeId2, requestParameters.primaryJobCode, requestParameters.jobTitle, requestParameters.fullTimeOrPartTimeCode, requestParameters.primaryWorkLocationCode, requestParameters.primaryProjectCode, requestParameters.deductionGroupCode, requestParameters.earningGroupCode, requestParameters.employeeTypeCode, requestParameters.employeeStatusCode, requestParameters.employeeNumber, requestParameters.supervisorID, requestParameters.originalHireDate, requestParameters.lastHireDate, requestParameters.dateOfTermination, requestParameters.dateOfRetirement, requestParameters.dateTimeCreated, requestParameters.dateTimeChanged, requestParameters.dateLastPayDatePaid, requestParameters.payGroup, requestParameters.isHomeCompany, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all employment record details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {EmploymentDetailsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: EmploymentDetailsApiGetDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpEmploymentDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyId, requestParameters.employeeId, requestParameters.primaryJobCode, requestParameters.jobTitle, requestParameters.fullTimeOrPartTimeCode, requestParameters.primaryWorkLocationCode, requestParameters.primaryProjectCode, requestParameters.deductionGroupCode, requestParameters.earningGroupCode, requestParameters.employeeTypeCode, requestParameters.employeeStatusCode, requestParameters.employeeNumber, requestParameters.supervisorID, requestParameters.originalHireDate, requestParameters.lastHireDate, requestParameters.dateOfTermination, requestParameters.dateOfRetirement, requestParameters.dateTimeCreated, requestParameters.dateTimeChanged, requestParameters.dateLastPayDatePaid, requestParameters.payGroup, requestParameters.isHomeCompany, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all employment record details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {EmploymentDetailsApiListByCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listByCompany(requestParameters: EmploymentDetailsApiListByCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpEmploymentDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listByCompany(requestParameters.companyId, requestParameters.companyId2, requestParameters.employeeId, requestParameters.primaryJobCode, requestParameters.jobTitle, requestParameters.fullTimeOrPartTimeCode, requestParameters.primaryWorkLocationCode, requestParameters.primaryProjectCode, requestParameters.deductionGroupCode, requestParameters.earningGroupCode, requestParameters.employeeTypeCode, requestParameters.employeeStatusCode, requestParameters.employeeNumber, requestParameters.supervisorID, requestParameters.originalHireDate, requestParameters.lastHireDate, requestParameters.dateOfTermination, requestParameters.dateOfRetirement, requestParameters.dateTimeCreated, requestParameters.dateTimeChanged, requestParameters.dateLastPayDatePaid, requestParameters.payGroup, requestParameters.isHomeCompany, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmploymentDetailsApi - factory interface
 * @export
 */
export const EmploymentDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmploymentDetailsApiFp(configuration)
    return {
        /**
         * Get a single employment detail by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCompanyIdAndEmployeeId(requestParameters: EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmpEmploymentDetails>> {
            return localVarFp.getByCompanyIdAndEmployeeId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all employment record details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {EmploymentDetailsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: EmploymentDetailsApiGetDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EmpEmploymentDetails>> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all employment record details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get Employment Details
         * @param {EmploymentDetailsApiListByCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listByCompany(requestParameters: EmploymentDetailsApiListByCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmpEmploymentDetails>> {
            return localVarFp.listByCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByCompanyIdAndEmployeeId operation in EmploymentDetailsApi.
 * @export
 * @interface EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest
 */
export type EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly employeeId: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly companyId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly employeeId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly primaryJobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly jobTitle?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly fullTimeOrPartTimeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly primaryWorkLocationCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly primaryProjectCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly deductionGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly earningGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly employeeTypeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly employeeStatusCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly employeeNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly supervisorID?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly originalHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly lastHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly dateOfTermination?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly dateOfRetirement?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly dateTimeCreated?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly dateTimeChanged?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly dateLastPayDatePaid?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly payGroup?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly isHomeCompany?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EmploymentDetailsApiGetByCompanyIdAndEmployeeId
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getDetails operation in EmploymentDetailsApi.
 * @export
 * @interface EmploymentDetailsApiGetDetailsRequest
 */
export type EmploymentDetailsApiGetDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly companyId?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly primaryJobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly jobTitle?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly fullTimeOrPartTimeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly primaryWorkLocationCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly primaryProjectCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly deductionGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly earningGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly employeeTypeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly employeeStatusCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly employeeNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly supervisorID?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly originalHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly lastHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly dateOfTermination?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly dateOfRetirement?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly dateTimeCreated?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly dateTimeChanged?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly dateLastPayDatePaid?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly payGroup?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly isHomeCompany?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EmploymentDetailsApiGetDetails
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for listByCompany operation in EmploymentDetailsApi.
 * @export
 * @interface EmploymentDetailsApiListByCompanyRequest
 */
export type EmploymentDetailsApiListByCompanyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly companyId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly primaryJobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly jobTitle?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly fullTimeOrPartTimeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly primaryWorkLocationCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly primaryProjectCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly deductionGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly earningGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly employeeTypeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly employeeStatusCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly employeeNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly supervisorID?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly originalHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly lastHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly dateOfTermination?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly dateOfRetirement?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly dateTimeCreated?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly dateTimeChanged?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly dateLastPayDatePaid?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly payGroup?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly isHomeCompany?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EmploymentDetailsApiListByCompany
    */
    readonly perPage?: number
    
}

/**
 * EmploymentDetailsApiGenerated - object-oriented interface
 * @export
 * @class EmploymentDetailsApiGenerated
 * @extends {BaseAPI}
 */
export class EmploymentDetailsApiGenerated extends BaseAPI {
    /**
     * Get a single employment detail by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get Employment Details
     * @param {EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentDetailsApiGenerated
     */
    public getByCompanyIdAndEmployeeId(requestParameters: EmploymentDetailsApiGetByCompanyIdAndEmployeeIdRequest, options?: AxiosRequestConfig) {
        return EmploymentDetailsApiFp(this.configuration).getByCompanyIdAndEmployeeId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all employment record details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get Employment Details
     * @param {EmploymentDetailsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentDetailsApiGenerated
     */
    public getDetails(requestParameters: EmploymentDetailsApiGetDetailsRequest = {}, options?: AxiosRequestConfig) {
        return EmploymentDetailsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all employment record details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employment-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get Employment Details
     * @param {EmploymentDetailsApiListByCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmploymentDetailsApiGenerated
     */
    public listByCompany(requestParameters: EmploymentDetailsApiListByCompanyRequest, options?: AxiosRequestConfig) {
        return EmploymentDetailsApiFp(this.configuration).listByCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
