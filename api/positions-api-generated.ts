/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Positions } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PositionsApi - axios parameter creator
 * @export
 */
export const PositionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Company Configuration Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br></br>           /configuration/v1/position endpoint can take following optional parameter:   <ul>     <li>     companyId :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     employeeType :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     payGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     statusCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     positionCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>      <li>     projectCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>       <li>     shiftGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     isProrated      </li>     <li>     isApproved      </li>      <li>     isEligibleForBenefits   </li>  <ul><br/>    Correct syntax when using parameters are as follows:    <ul>      <li>Get positions without parameter     <ul>      <li>Example: /configuration/v1/positions      </ul>      </li>     <li>Get positions by single companyid      <ul>      <li>Example: /configuration/v1/positions?companyid={companyid}</li>     </ul>      </li>   <li>Get positions by multiple companyid      <ul>      <li>Example: /configuration/v1/positions?companyid=[companyid1,companyid2]</li>     </ul>      </li>     <li>Get positions by positionsCode     <ul>      <li>Example: configuration/v1/positions?positionCode={positionCode}</li>     </ul>      </li>     <li>Get positions by isEligibleForBenefits      <ul>      <li>Example: configuration/v1/positions?isEligibleForBenefits={isEligibleForBenefit}</li>     </ul>      </li>     <li>Get positions by employeeType      <ul>      <li>Example: configuration/v1/positions?employeeType={employeeType}</li>     </ul>      </li>     <li>Get positions by statusCode      <ul>      <li>Example: configuration/v1/positions?statusCode={statusCode}</li>     </ul>      </li>     <li>Get positions by shiftGroupCode      <ul>      <li>Example: configuration/v1/positions?shiftGrouptCode={shiftGrouptCode}</li>     </ul>      </li>      <li>Get positions by using all parameter      <ul>      <li>Example: configuration/v1/positions?isApproved={isApproved}&employeeType={employeeType}&shiftGroupCode={shiftGroupCode}&isEligibleForBenefits={isEligibleForBenefits}&isProrated={isProrated}&statusCode={statusCode}&payGroupCode={payGroup}&positionCode={positionCode}&projectCode={projectCode}&companyId={companyId}&page={page}&per_Page={per_Page}</li>     </ul>      </li>      </ul>   
         * @summary Returns list of employee position information filtered on various parameters
         * @param {string} [companyId] 
         * @param {string} [employeeType] 
         * @param {string} [statusCode] 
         * @param {string} [payGroupCode] 
         * @param {string} [positionCode] 
         * @param {string} [projectCode] 
         * @param {string} [shiftGroupCode] 
         * @param {boolean} [isProrated] 
         * @param {boolean} [isApproved] 
         * @param {boolean} [isEligibleForBenefits] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiltered: async (companyId?: string, employeeType?: string, statusCode?: string, payGroupCode?: string, positionCode?: string, projectCode?: string, shiftGroupCode?: string, isProrated?: boolean, isApproved?: boolean, isEligibleForBenefits?: boolean, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuration/v1/positions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (employeeType !== undefined) {
                localVarQueryParameter['employeeType'] = employeeType;
            }

            if (statusCode !== undefined) {
                localVarQueryParameter['statusCode'] = statusCode;
            }

            if (payGroupCode !== undefined) {
                localVarQueryParameter['payGroupCode'] = payGroupCode;
            }

            if (positionCode !== undefined) {
                localVarQueryParameter['positionCode'] = positionCode;
            }

            if (projectCode !== undefined) {
                localVarQueryParameter['projectCode'] = projectCode;
            }

            if (shiftGroupCode !== undefined) {
                localVarQueryParameter['shiftGroupCode'] = shiftGroupCode;
            }

            if (isProrated !== undefined) {
                localVarQueryParameter['isProrated'] = isProrated;
            }

            if (isApproved !== undefined) {
                localVarQueryParameter['isApproved'] = isApproved;
            }

            if (isEligibleForBenefits !== undefined) {
                localVarQueryParameter['isEligibleForBenefits'] = isEligibleForBenefits;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/configuration/v1/positions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PositionsApi - functional programming interface
 * @export
 */
export const PositionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PositionsApiAxiosParamCreator(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Company Configuration Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br></br>           /configuration/v1/position endpoint can take following optional parameter:   <ul>     <li>     companyId :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     employeeType :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     payGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     statusCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     positionCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>      <li>     projectCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>       <li>     shiftGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     isProrated      </li>     <li>     isApproved      </li>      <li>     isEligibleForBenefits   </li>  <ul><br/>    Correct syntax when using parameters are as follows:    <ul>      <li>Get positions without parameter     <ul>      <li>Example: /configuration/v1/positions      </ul>      </li>     <li>Get positions by single companyid      <ul>      <li>Example: /configuration/v1/positions?companyid={companyid}</li>     </ul>      </li>   <li>Get positions by multiple companyid      <ul>      <li>Example: /configuration/v1/positions?companyid=[companyid1,companyid2]</li>     </ul>      </li>     <li>Get positions by positionsCode     <ul>      <li>Example: configuration/v1/positions?positionCode={positionCode}</li>     </ul>      </li>     <li>Get positions by isEligibleForBenefits      <ul>      <li>Example: configuration/v1/positions?isEligibleForBenefits={isEligibleForBenefit}</li>     </ul>      </li>     <li>Get positions by employeeType      <ul>      <li>Example: configuration/v1/positions?employeeType={employeeType}</li>     </ul>      </li>     <li>Get positions by statusCode      <ul>      <li>Example: configuration/v1/positions?statusCode={statusCode}</li>     </ul>      </li>     <li>Get positions by shiftGroupCode      <ul>      <li>Example: configuration/v1/positions?shiftGrouptCode={shiftGrouptCode}</li>     </ul>      </li>      <li>Get positions by using all parameter      <ul>      <li>Example: configuration/v1/positions?isApproved={isApproved}&employeeType={employeeType}&shiftGroupCode={shiftGroupCode}&isEligibleForBenefits={isEligibleForBenefits}&isProrated={isProrated}&statusCode={statusCode}&payGroupCode={payGroup}&positionCode={positionCode}&projectCode={projectCode}&companyId={companyId}&page={page}&per_Page={per_Page}</li>     </ul>      </li>      </ul>   
         * @summary Returns list of employee position information filtered on various parameters
         * @param {PositionsApiListFilteredRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFiltered(requestParameters: PositionsApiListFilteredRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Positions>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFiltered(requestParameters.companyId, requestParameters.employeeType, requestParameters.statusCode, requestParameters.payGroupCode, requestParameters.positionCode, requestParameters.projectCode, requestParameters.shiftGroupCode, requestParameters.isProrated, requestParameters.isApproved, requestParameters.isEligibleForBenefits, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PositionsApi - factory interface
 * @export
 */
export const PositionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PositionsApiFp(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Company Configuration Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br></br>           /configuration/v1/position endpoint can take following optional parameter:   <ul>     <li>     companyId :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     employeeType :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     payGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     statusCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     positionCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>      <li>     projectCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>       <li>     shiftGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     isProrated      </li>     <li>     isApproved      </li>      <li>     isEligibleForBenefits   </li>  <ul><br/>    Correct syntax when using parameters are as follows:    <ul>      <li>Get positions without parameter     <ul>      <li>Example: /configuration/v1/positions      </ul>      </li>     <li>Get positions by single companyid      <ul>      <li>Example: /configuration/v1/positions?companyid={companyid}</li>     </ul>      </li>   <li>Get positions by multiple companyid      <ul>      <li>Example: /configuration/v1/positions?companyid=[companyid1,companyid2]</li>     </ul>      </li>     <li>Get positions by positionsCode     <ul>      <li>Example: configuration/v1/positions?positionCode={positionCode}</li>     </ul>      </li>     <li>Get positions by isEligibleForBenefits      <ul>      <li>Example: configuration/v1/positions?isEligibleForBenefits={isEligibleForBenefit}</li>     </ul>      </li>     <li>Get positions by employeeType      <ul>      <li>Example: configuration/v1/positions?employeeType={employeeType}</li>     </ul>      </li>     <li>Get positions by statusCode      <ul>      <li>Example: configuration/v1/positions?statusCode={statusCode}</li>     </ul>      </li>     <li>Get positions by shiftGroupCode      <ul>      <li>Example: configuration/v1/positions?shiftGrouptCode={shiftGrouptCode}</li>     </ul>      </li>      <li>Get positions by using all parameter      <ul>      <li>Example: configuration/v1/positions?isApproved={isApproved}&employeeType={employeeType}&shiftGroupCode={shiftGroupCode}&isEligibleForBenefits={isEligibleForBenefits}&isProrated={isProrated}&statusCode={statusCode}&payGroupCode={payGroup}&positionCode={positionCode}&projectCode={projectCode}&companyId={companyId}&page={page}&per_Page={per_Page}</li>     </ul>      </li>      </ul>   
         * @summary Returns list of employee position information filtered on various parameters
         * @param {PositionsApiListFilteredRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiltered(requestParameters: PositionsApiListFilteredRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Positions>> {
            return localVarFp.listFiltered(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listFiltered operation in PositionsApi.
 * @export
 * @interface PositionsApiListFilteredRequest
 */
export type PositionsApiListFilteredRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiListFiltered
    */
    readonly companyId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiListFiltered
    */
    readonly employeeType?: string
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiListFiltered
    */
    readonly statusCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiListFiltered
    */
    readonly payGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiListFiltered
    */
    readonly positionCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiListFiltered
    */
    readonly projectCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof PositionsApiListFiltered
    */
    readonly shiftGroupCode?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof PositionsApiListFiltered
    */
    readonly isProrated?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof PositionsApiListFiltered
    */
    readonly isApproved?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof PositionsApiListFiltered
    */
    readonly isEligibleForBenefits?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof PositionsApiListFiltered
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof PositionsApiListFiltered
    */
    readonly perPage?: number
    
}

/**
 * PositionsApiGenerated - object-oriented interface
 * @export
 * @class PositionsApiGenerated
 * @extends {BaseAPI}
 */
export class PositionsApiGenerated extends BaseAPI {
    /**
     * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Company Configuration Integration\" Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).</br></br>           /configuration/v1/position endpoint can take following optional parameter:   <ul>     <li>     companyId :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     employeeType :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     payGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     statusCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     positionCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>      <li>     projectCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>       <li>     shiftGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     </li>     <li>     isProrated      </li>     <li>     isApproved      </li>      <li>     isEligibleForBenefits   </li>  <ul><br/>    Correct syntax when using parameters are as follows:    <ul>      <li>Get positions without parameter     <ul>      <li>Example: /configuration/v1/positions      </ul>      </li>     <li>Get positions by single companyid      <ul>      <li>Example: /configuration/v1/positions?companyid={companyid}</li>     </ul>      </li>   <li>Get positions by multiple companyid      <ul>      <li>Example: /configuration/v1/positions?companyid=[companyid1,companyid2]</li>     </ul>      </li>     <li>Get positions by positionsCode     <ul>      <li>Example: configuration/v1/positions?positionCode={positionCode}</li>     </ul>      </li>     <li>Get positions by isEligibleForBenefits      <ul>      <li>Example: configuration/v1/positions?isEligibleForBenefits={isEligibleForBenefit}</li>     </ul>      </li>     <li>Get positions by employeeType      <ul>      <li>Example: configuration/v1/positions?employeeType={employeeType}</li>     </ul>      </li>     <li>Get positions by statusCode      <ul>      <li>Example: configuration/v1/positions?statusCode={statusCode}</li>     </ul>      </li>     <li>Get positions by shiftGroupCode      <ul>      <li>Example: configuration/v1/positions?shiftGrouptCode={shiftGrouptCode}</li>     </ul>      </li>      <li>Get positions by using all parameter      <ul>      <li>Example: configuration/v1/positions?isApproved={isApproved}&employeeType={employeeType}&shiftGroupCode={shiftGroupCode}&isEligibleForBenefits={isEligibleForBenefits}&isProrated={isProrated}&statusCode={statusCode}&payGroupCode={payGroup}&positionCode={positionCode}&projectCode={projectCode}&companyId={companyId}&page={page}&per_Page={per_Page}</li>     </ul>      </li>      </ul>   
     * @summary Returns list of employee position information filtered on various parameters
     * @param {PositionsApiListFilteredRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PositionsApiGenerated
     */
    public listFiltered(requestParameters: PositionsApiListFilteredRequest = {}, options?: AxiosRequestConfig) {
        return PositionsApiFp(this.configuration).listFiltered(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
