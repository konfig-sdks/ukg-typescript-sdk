/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmpPersonDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PersonDetailsApi - axios parameter creator
 * @export
 */
export const PersonDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all person details.  If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all person details
         * @param {string} [companyId] 
         * @param {string} [employeeId] 
         * @param {string} [lastName] 
         * @param {string} [emailAddress] 
         * @param {string} [addressState] 
         * @param {string} [addressCountry] 
         * @param {string} [cobraIsActive] 
         * @param {string} [cobraStatus] 
         * @param {string} [dateOfCobraEvent] Used to find date of COBRA event less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateTimeCreated] Used to find person record created less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateTimeChanged] Used to find person record changed less than, greater than, equal to, or between passed date(s)
         * @param {string} [nationalId] 
         * @param {string} [nationalIdCountry] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDetails: async (companyId?: string, employeeId?: string, lastName?: string, emailAddress?: string, addressState?: string, addressCountry?: string, cobraIsActive?: string, cobraStatus?: string, dateOfCobraEvent?: string, dateTimeCreated?: string, dateTimeChanged?: string, nationalId?: string, nationalIdCountry?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personnel/v1/person-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (emailAddress !== undefined) {
                localVarQueryParameter['emailAddress'] = emailAddress;
            }

            if (addressState !== undefined) {
                localVarQueryParameter['addressState'] = addressState;
            }

            if (addressCountry !== undefined) {
                localVarQueryParameter['addressCountry'] = addressCountry;
            }

            if (cobraIsActive !== undefined) {
                localVarQueryParameter['cobraIsActive'] = cobraIsActive;
            }

            if (cobraStatus !== undefined) {
                localVarQueryParameter['cobraStatus'] = cobraStatus;
            }

            if (dateOfCobraEvent !== undefined) {
                localVarQueryParameter['dateOfCobraEvent'] = dateOfCobraEvent;
            }

            if (dateTimeCreated !== undefined) {
                localVarQueryParameter['dateTimeCreated'] = dateTimeCreated;
            }

            if (dateTimeChanged !== undefined) {
                localVarQueryParameter['dateTimeChanged'] = dateTimeChanged;
            }

            if (nationalId !== undefined) {
                localVarQueryParameter['nationalId'] = nationalId;
            }

            if (nationalIdCountry !== undefined) {
                localVarQueryParameter['nationalIdCountry'] = nationalIdCountry;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/person-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all person details for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all person details for a single company
         * @param {string} companyId 
         * @param {string} [companyId2] 
         * @param {string} [employeeId] 
         * @param {string} [lastName] 
         * @param {string} [emailAddress] 
         * @param {string} [addressState] 
         * @param {string} [addressCountry] 
         * @param {string} [cobraIsActive] 
         * @param {string} [cobraStatus] 
         * @param {string} [dateOfCobraEvent] Used to find date of COBRA event less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateTimeCreated] Used to find person record created less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateTimeChanged] Used to find person record changed less than, greater than, equal to, or between passed date(s)
         * @param {string} [nationalId] 
         * @param {string} [nationalIdCountry] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCompanyDetails: async (companyId: string, companyId2?: string, employeeId?: string, lastName?: string, emailAddress?: string, addressState?: string, addressCountry?: string, cobraIsActive?: string, cobraStatus?: string, dateOfCobraEvent?: string, dateTimeCreated?: string, dateTimeChanged?: string, nationalId?: string, nationalIdCountry?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSingleCompanyDetails', 'companyId', companyId)
            const localVarPath = `/personnel/v1/companies/{companyId}/person-details`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId2 !== undefined) {
                localVarQueryParameter['companyId'] = companyId2;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (emailAddress !== undefined) {
                localVarQueryParameter['emailAddress'] = emailAddress;
            }

            if (addressState !== undefined) {
                localVarQueryParameter['addressState'] = addressState;
            }

            if (addressCountry !== undefined) {
                localVarQueryParameter['addressCountry'] = addressCountry;
            }

            if (cobraIsActive !== undefined) {
                localVarQueryParameter['cobraIsActive'] = cobraIsActive;
            }

            if (cobraStatus !== undefined) {
                localVarQueryParameter['cobraStatus'] = cobraStatus;
            }

            if (dateOfCobraEvent !== undefined) {
                localVarQueryParameter['dateOfCobraEvent'] = dateOfCobraEvent;
            }

            if (dateTimeCreated !== undefined) {
                localVarQueryParameter['dateTimeCreated'] = dateTimeCreated;
            }

            if (dateTimeChanged !== undefined) {
                localVarQueryParameter['dateTimeChanged'] = dateTimeChanged;
            }

            if (nationalId !== undefined) {
                localVarQueryParameter['nationalId'] = nationalId;
            }

            if (nationalIdCountry !== undefined) {
                localVarQueryParameter['nationalIdCountry'] = nationalIdCountry;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/companies/{companyId}/person-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single person detail record.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get a single person detail record
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDetailRecord: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getSingleDetailRecord', 'employeeId', employeeId)
            const localVarPath = `/personnel/v1/person-details/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/person-details/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single person detail record for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get a single person detail record for a single company
         * @param {string} companyId 
         * @param {string} employeeId 
         * @param {string} [companyId2] 
         * @param {string} [employeeId2] 
         * @param {string} [lastName] 
         * @param {string} [emailAddress] 
         * @param {string} [addressState] 
         * @param {string} [addressCountry] 
         * @param {string} [cobraIsActive] 
         * @param {string} [cobraStatus] 
         * @param {string} [dateOfCobraEvent] Used to find date of COBRA event less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateTimeCreated] Used to find person record created less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateTimeChanged] Used to find person record changed less than, greater than, equal to, or between passed date(s)
         * @param {string} [nationalId] 
         * @param {string} [nationalIdCountry] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleRecord: async (companyId: string, employeeId: string, companyId2?: string, employeeId2?: string, lastName?: string, emailAddress?: string, addressState?: string, addressCountry?: string, cobraIsActive?: string, cobraStatus?: string, dateOfCobraEvent?: string, dateTimeCreated?: string, dateTimeChanged?: string, nationalId?: string, nationalIdCountry?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getSingleRecord', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getSingleRecord', 'employeeId', employeeId)
            const localVarPath = `/personnel/v1/companies/{companyId}/employees/{employeeId}/person-details`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId2 !== undefined) {
                localVarQueryParameter['companyId'] = companyId2;
            }

            if (employeeId2 !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId2;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }

            if (emailAddress !== undefined) {
                localVarQueryParameter['emailAddress'] = emailAddress;
            }

            if (addressState !== undefined) {
                localVarQueryParameter['addressState'] = addressState;
            }

            if (addressCountry !== undefined) {
                localVarQueryParameter['addressCountry'] = addressCountry;
            }

            if (cobraIsActive !== undefined) {
                localVarQueryParameter['cobraIsActive'] = cobraIsActive;
            }

            if (cobraStatus !== undefined) {
                localVarQueryParameter['cobraStatus'] = cobraStatus;
            }

            if (dateOfCobraEvent !== undefined) {
                localVarQueryParameter['dateOfCobraEvent'] = dateOfCobraEvent;
            }

            if (dateTimeCreated !== undefined) {
                localVarQueryParameter['dateTimeCreated'] = dateTimeCreated;
            }

            if (dateTimeChanged !== undefined) {
                localVarQueryParameter['dateTimeChanged'] = dateTimeChanged;
            }

            if (nationalId !== undefined) {
                localVarQueryParameter['nationalId'] = nationalId;
            }

            if (nationalIdCountry !== undefined) {
                localVarQueryParameter['nationalIdCountry'] = nationalIdCountry;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/companies/{companyId}/employees/{employeeId}/person-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonDetailsApi - functional programming interface
 * @export
 */
export const PersonDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all person details.  If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all person details
         * @param {PersonDetailsApiGetAllDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDetails(requestParameters: PersonDetailsApiGetAllDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpPersonDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDetails(requestParameters.companyId, requestParameters.employeeId, requestParameters.lastName, requestParameters.emailAddress, requestParameters.addressState, requestParameters.addressCountry, requestParameters.cobraIsActive, requestParameters.cobraStatus, requestParameters.dateOfCobraEvent, requestParameters.dateTimeCreated, requestParameters.dateTimeChanged, requestParameters.nationalId, requestParameters.nationalIdCountry, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all person details for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all person details for a single company
         * @param {PersonDetailsApiGetSingleCompanyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleCompanyDetails(requestParameters: PersonDetailsApiGetSingleCompanyDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpPersonDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleCompanyDetails(requestParameters.companyId, requestParameters.companyId2, requestParameters.employeeId, requestParameters.lastName, requestParameters.emailAddress, requestParameters.addressState, requestParameters.addressCountry, requestParameters.cobraIsActive, requestParameters.cobraStatus, requestParameters.dateOfCobraEvent, requestParameters.dateTimeCreated, requestParameters.dateTimeChanged, requestParameters.nationalId, requestParameters.nationalIdCountry, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single person detail record.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get a single person detail record
         * @param {PersonDetailsApiGetSingleDetailRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleDetailRecord(requestParameters: PersonDetailsApiGetSingleDetailRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmpPersonDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleDetailRecord(requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single person detail record for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get a single person detail record for a single company
         * @param {PersonDetailsApiGetSingleRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleRecord(requestParameters: PersonDetailsApiGetSingleRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpPersonDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleRecord(requestParameters.companyId, requestParameters.employeeId, requestParameters.companyId2, requestParameters.employeeId2, requestParameters.lastName, requestParameters.emailAddress, requestParameters.addressState, requestParameters.addressCountry, requestParameters.cobraIsActive, requestParameters.cobraStatus, requestParameters.dateOfCobraEvent, requestParameters.dateTimeCreated, requestParameters.dateTimeChanged, requestParameters.nationalId, requestParameters.nationalIdCountry, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PersonDetailsApi - factory interface
 * @export
 */
export const PersonDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonDetailsApiFp(configuration)
    return {
        /**
         * Get all person details.  If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all person details
         * @param {PersonDetailsApiGetAllDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDetails(requestParameters: PersonDetailsApiGetAllDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EmpPersonDetails>> {
            return localVarFp.getAllDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all person details for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all person details for a single company
         * @param {PersonDetailsApiGetSingleCompanyDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleCompanyDetails(requestParameters: PersonDetailsApiGetSingleCompanyDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmpPersonDetails>> {
            return localVarFp.getSingleCompanyDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single person detail record.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get a single person detail record
         * @param {PersonDetailsApiGetSingleDetailRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleDetailRecord(requestParameters: PersonDetailsApiGetSingleDetailRecordRequest, options?: AxiosRequestConfig): AxiosPromise<EmpPersonDetails> {
            return localVarFp.getSingleDetailRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single person detail record for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get a single person detail record for a single company
         * @param {PersonDetailsApiGetSingleRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleRecord(requestParameters: PersonDetailsApiGetSingleRecordRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmpPersonDetails>> {
            return localVarFp.getSingleRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllDetails operation in PersonDetailsApi.
 * @export
 * @interface PersonDetailsApiGetAllDetailsRequest
 */
export type PersonDetailsApiGetAllDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly companyId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly lastName?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly emailAddress?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly addressState?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly addressCountry?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly cobraIsActive?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly cobraStatus?: string
    
    /**
    * Used to find date of COBRA event less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly dateOfCobraEvent?: string
    
    /**
    * Used to find person record created less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly dateTimeCreated?: string
    
    /**
    * Used to find person record changed less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly dateTimeChanged?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly nationalId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly nationalIdCountry?: string
    
    /**
    * 
    * @type {number}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonDetailsApiGetAllDetails
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getSingleCompanyDetails operation in PersonDetailsApi.
 * @export
 * @interface PersonDetailsApiGetSingleCompanyDetailsRequest
 */
export type PersonDetailsApiGetSingleCompanyDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly companyId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly lastName?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly emailAddress?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly addressState?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly addressCountry?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly cobraIsActive?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly cobraStatus?: string
    
    /**
    * Used to find date of COBRA event less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly dateOfCobraEvent?: string
    
    /**
    * Used to find person record created less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly dateTimeCreated?: string
    
    /**
    * Used to find person record changed less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly dateTimeChanged?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly nationalId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly nationalIdCountry?: string
    
    /**
    * 
    * @type {number}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonDetailsApiGetSingleCompanyDetails
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getSingleDetailRecord operation in PersonDetailsApi.
 * @export
 * @interface PersonDetailsApiGetSingleDetailRecordRequest
 */
export type PersonDetailsApiGetSingleDetailRecordRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleDetailRecord
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getSingleRecord operation in PersonDetailsApi.
 * @export
 * @interface PersonDetailsApiGetSingleRecordRequest
 */
export type PersonDetailsApiGetSingleRecordRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly employeeId: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly companyId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly employeeId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly lastName?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly emailAddress?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly addressState?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly addressCountry?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly cobraIsActive?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly cobraStatus?: string
    
    /**
    * Used to find date of COBRA event less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly dateOfCobraEvent?: string
    
    /**
    * Used to find person record created less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly dateTimeCreated?: string
    
    /**
    * Used to find person record changed less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly dateTimeChanged?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly nationalId?: string
    
    /**
    * 
    * @type {string}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly nationalIdCountry?: string
    
    /**
    * 
    * @type {number}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof PersonDetailsApiGetSingleRecord
    */
    readonly perPage?: number
    
}

/**
 * PersonDetailsApiGenerated - object-oriented interface
 * @export
 * @class PersonDetailsApiGenerated
 * @extends {BaseAPI}
 */
export class PersonDetailsApiGenerated extends BaseAPI {
    /**
     * Get all person details.  If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get all person details
     * @param {PersonDetailsApiGetAllDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonDetailsApiGenerated
     */
    public getAllDetails(requestParameters: PersonDetailsApiGetAllDetailsRequest = {}, options?: AxiosRequestConfig) {
        return PersonDetailsApiFp(this.configuration).getAllDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all person details for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get all person details for a single company
     * @param {PersonDetailsApiGetSingleCompanyDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonDetailsApiGenerated
     */
    public getSingleCompanyDetails(requestParameters: PersonDetailsApiGetSingleCompanyDetailsRequest, options?: AxiosRequestConfig) {
        return PersonDetailsApiFp(this.configuration).getSingleCompanyDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single person detail record.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /person-details/{employeeId}?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /person-details/{employeeId}?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get a single person detail record
     * @param {PersonDetailsApiGetSingleDetailRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonDetailsApiGenerated
     */
    public getSingleDetailRecord(requestParameters: PersonDetailsApiGetSingleDetailRecordRequest, options?: AxiosRequestConfig) {
        return PersonDetailsApiFp(this.configuration).getSingleDetailRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single person detail record for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Person Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get a single person detail record for a single company
     * @param {PersonDetailsApiGetSingleRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonDetailsApiGenerated
     */
    public getSingleRecord(requestParameters: PersonDetailsApiGetSingleRecordRequest, options?: AxiosRequestConfig) {
        return PersonDetailsApiFp(this.configuration).getSingleRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
