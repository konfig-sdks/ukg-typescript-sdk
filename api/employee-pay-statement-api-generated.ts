/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeIdentifier } from '../models';
// @ts-ignore
import { EmployeePayStatementModel } from '../models';
// @ts-ignore
import { EmployeePayStatementRangeFilter } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeePayStatementApi - axios parameter creator
 * @export
 */
export const EmployeePayStatementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns zero or more pay statements for a specific employee identified by the passed-in employee identifier. The pay statement returned is based on the start date and the end date passed in. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee pay statement(s) based on the passed employee identifier for a given date range.
         * @param {EmployeePayStatementRangeFilter} employeePayStatementRangeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDateRange: async (employeePayStatementRangeFilter: EmployeePayStatementRangeFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeePayStatementRangeFilter' is not null or undefined
            assertParamExists('getByDateRange', 'employeePayStatementRangeFilter', employeePayStatementRangeFilter)
            const localVarPath = `/payroll/v1/employees/pay-statements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeePayStatementRangeFilter,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v1/employees/pay-statements',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeePayStatementRangeFilter, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns zero or one pay statements based on the given pay identifier. The pay identifier is a string value that represents a unique pay statement.<br /> If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee pay statement based on the given pay identifier.
         * @param {string} payIdentifier 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPayIdentifier: async (payIdentifier: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'payIdentifier' is not null or undefined
            assertParamExists('getByPayIdentifier', 'payIdentifier', payIdentifier)
            const localVarPath = `/payroll/v1/employees/pay-statement/{PayIdentifier}`
                .replace(`{${"PayIdentifier"}}`, encodeURIComponent(String(payIdentifier !== undefined ? payIdentifier : `-PayIdentifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v1/employees/pay-statement/{PayIdentifier}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method allows you to retrieve an individual pay statement by providing an employee identifier. This is helpful if you are designing an application that is aware of the employees to retrieve. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password})
         * @summary Get employee last pay statement based on the passed employee identifier.
         * @param {EmployeePayStatementRangeFilter} employeePayStatementRangeFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastPayStatement: async (employeePayStatementRangeFilter: EmployeePayStatementRangeFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeePayStatementRangeFilter' is not null or undefined
            assertParamExists('getLastPayStatement', 'employeePayStatementRangeFilter', employeePayStatementRangeFilter)
            const localVarPath = `/payroll/v1/employees/pay-statement/last`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeePayStatementRangeFilter,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v1/employees/pay-statement/last',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeePayStatementRangeFilter, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeePayStatementApi - functional programming interface
 * @export
 */
export const EmployeePayStatementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeePayStatementApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns zero or more pay statements for a specific employee identified by the passed-in employee identifier. The pay statement returned is based on the start date and the end date passed in. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee pay statement(s) based on the passed employee identifier for a given date range.
         * @param {EmployeePayStatementApiGetByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByDateRange(requestParameters: EmployeePayStatementApiGetByDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeePayStatementModel>>> {
            const employeePayStatementRangeFilter: EmployeePayStatementRangeFilter = {
                employeeIdentifier: requestParameters.employeeIdentifier,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                page: requestParameters.page,
                per_Page: requestParameters.per_Page,
                pagesCount: requestParameters.pagesCount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByDateRange(employeePayStatementRangeFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns zero or one pay statements based on the given pay identifier. The pay identifier is a string value that represents a unique pay statement.<br /> If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee pay statement based on the given pay identifier.
         * @param {EmployeePayStatementApiGetByPayIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByPayIdentifier(requestParameters: EmployeePayStatementApiGetByPayIdentifierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeePayStatementModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByPayIdentifier(requestParameters.payIdentifier, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method allows you to retrieve an individual pay statement by providing an employee identifier. This is helpful if you are designing an application that is aware of the employees to retrieve. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password})
         * @summary Get employee last pay statement based on the passed employee identifier.
         * @param {EmployeePayStatementApiGetLastPayStatementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLastPayStatement(requestParameters: EmployeePayStatementApiGetLastPayStatementRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmployeePayStatementModel>> {
            const employeePayStatementRangeFilter: EmployeePayStatementRangeFilter = {
                employeeIdentifier: requestParameters.employeeIdentifier,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                page: requestParameters.page,
                per_Page: requestParameters.per_Page,
                pagesCount: requestParameters.pagesCount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLastPayStatement(employeePayStatementRangeFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeePayStatementApi - factory interface
 * @export
 */
export const EmployeePayStatementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeePayStatementApiFp(configuration)
    return {
        /**
         * This method returns zero or more pay statements for a specific employee identified by the passed-in employee identifier. The pay statement returned is based on the start date and the end date passed in. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee pay statement(s) based on the passed employee identifier for a given date range.
         * @param {EmployeePayStatementApiGetByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDateRange(requestParameters: EmployeePayStatementApiGetByDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeePayStatementModel>> {
            return localVarFp.getByDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns zero or one pay statements based on the given pay identifier. The pay identifier is a string value that represents a unique pay statement.<br /> If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee pay statement based on the given pay identifier.
         * @param {EmployeePayStatementApiGetByPayIdentifierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByPayIdentifier(requestParameters: EmployeePayStatementApiGetByPayIdentifierRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeePayStatementModel> {
            return localVarFp.getByPayIdentifier(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method allows you to retrieve an individual pay statement by providing an employee identifier. This is helpful if you are designing an application that is aware of the employees to retrieve. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password})
         * @summary Get employee last pay statement based on the passed employee identifier.
         * @param {EmployeePayStatementApiGetLastPayStatementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLastPayStatement(requestParameters: EmployeePayStatementApiGetLastPayStatementRequest, options?: AxiosRequestConfig): AxiosPromise<EmployeePayStatementModel> {
            return localVarFp.getLastPayStatement(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByDateRange operation in EmployeePayStatementApi.
 * @export
 * @interface EmployeePayStatementApiGetByDateRangeRequest
 */
export type EmployeePayStatementApiGetByDateRangeRequest = {
    
} & EmployeePayStatementRangeFilter

/**
 * Request parameters for getByPayIdentifier operation in EmployeePayStatementApi.
 * @export
 * @interface EmployeePayStatementApiGetByPayIdentifierRequest
 */
export type EmployeePayStatementApiGetByPayIdentifierRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmployeePayStatementApiGetByPayIdentifier
    */
    readonly payIdentifier: string
    
}

/**
 * Request parameters for getLastPayStatement operation in EmployeePayStatementApi.
 * @export
 * @interface EmployeePayStatementApiGetLastPayStatementRequest
 */
export type EmployeePayStatementApiGetLastPayStatementRequest = {
    
} & EmployeePayStatementRangeFilter

/**
 * EmployeePayStatementApiGenerated - object-oriented interface
 * @export
 * @class EmployeePayStatementApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeePayStatementApiGenerated extends BaseAPI {
    /**
     * This method returns zero or more pay statements for a specific employee identified by the passed-in employee identifier. The pay statement returned is based on the start date and the end date passed in. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     * @summary Get employee pay statement(s) based on the passed employee identifier for a given date range.
     * @param {EmployeePayStatementApiGetByDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePayStatementApiGenerated
     */
    public getByDateRange(requestParameters: EmployeePayStatementApiGetByDateRangeRequest, options?: AxiosRequestConfig) {
        return EmployeePayStatementApiFp(this.configuration).getByDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns zero or one pay statements based on the given pay identifier. The pay identifier is a string value that represents a unique pay statement.<br /> If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     * @summary Get employee pay statement based on the given pay identifier.
     * @param {EmployeePayStatementApiGetByPayIdentifierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePayStatementApiGenerated
     */
    public getByPayIdentifier(requestParameters: EmployeePayStatementApiGetByPayIdentifierRequest, options?: AxiosRequestConfig) {
        return EmployeePayStatementApiFp(this.configuration).getByPayIdentifier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method allows you to retrieve an individual pay statement by providing an employee identifier. This is helpful if you are designing an application that is aware of the employees to retrieve. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password})
     * @summary Get employee last pay statement based on the passed employee identifier.
     * @param {EmployeePayStatementApiGetLastPayStatementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeePayStatementApiGenerated
     */
    public getLastPayStatement(requestParameters: EmployeePayStatementApiGetLastPayStatementRequest, options?: AxiosRequestConfig) {
        return EmployeePayStatementApiFp(this.configuration).getLastPayStatement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
