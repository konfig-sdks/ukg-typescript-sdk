/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BackgroundChecks } from '../models';
// @ts-ignore
import { BackgroundChecksApplication } from '../models';
// @ts-ignore
import { BackgroundChecksAuthor } from '../models';
// @ts-ignore
import { BackgroundChecksPackages } from '../models';
// @ts-ignore
import { BadRequest } from '../models';
// @ts-ignore
import { Links } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CandidateRequestApi - axios parameter creator
 * @export
 */
export const CandidateRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add Background Check to Candidate
         * @summary Background Check Request
         * @param {string} candidateId 
         * @param {string} tenantAlias 
         * @param {BackgroundChecks} [backgroundChecks] New background check to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBackgroundCheck: async (candidateId: string, tenantAlias: string, backgroundChecks?: BackgroundChecks, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('addBackgroundCheck', 'candidateId', candidateId)
            // verify required parameter 'tenantAlias' is not null or undefined
            assertParamExists('addBackgroundCheck', 'tenantAlias', tenantAlias)
            const localVarPath = `/{tenant-alias}/api/candidates/{candidate-id}/background-checks`
                .replace(`{${"candidate-id"}}`, encodeURIComponent(String(candidateId !== undefined ? candidateId : `-candidate-id-`)))
                .replace(`{${"tenant-alias"}}`, encodeURIComponent(String(tenantAlias !== undefined ? tenantAlias : `-tenant-alias-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: backgroundChecks,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{tenant-alias}/api/candidates/{candidate-id}/background-checks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(backgroundChecks, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Candidate Background Check
         * @summary Background Check Status
         * @param {string} candidateId 
         * @param {string} backgroundCheckId 
         * @param {string} tenantAlias 
         * @param {BackgroundChecks} [backgroundChecks] Background check status to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackgroundCheck: async (candidateId: string, backgroundCheckId: string, tenantAlias: string, backgroundChecks?: BackgroundChecks, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'candidateId' is not null or undefined
            assertParamExists('updateBackgroundCheck', 'candidateId', candidateId)
            // verify required parameter 'backgroundCheckId' is not null or undefined
            assertParamExists('updateBackgroundCheck', 'backgroundCheckId', backgroundCheckId)
            // verify required parameter 'tenantAlias' is not null or undefined
            assertParamExists('updateBackgroundCheck', 'tenantAlias', tenantAlias)
            const localVarPath = `/{tenant-alias}/api/candidates/{candidate-id}/background-checks/{background-check-id}`
                .replace(`{${"candidate-id"}}`, encodeURIComponent(String(candidateId !== undefined ? candidateId : `-candidate-id-`)))
                .replace(`{${"background-check-id"}}`, encodeURIComponent(String(backgroundCheckId !== undefined ? backgroundCheckId : `-background-check-id-`)))
                .replace(`{${"tenant-alias"}}`, encodeURIComponent(String(tenantAlias !== undefined ? tenantAlias : `-tenant-alias-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: backgroundChecks,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{tenant-alias}/api/candidates/{candidate-id}/background-checks/{background-check-id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(backgroundChecks, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CandidateRequestApi - functional programming interface
 * @export
 */
export const CandidateRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CandidateRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * Add Background Check to Candidate
         * @summary Background Check Request
         * @param {CandidateRequestApiAddBackgroundCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBackgroundCheck(requestParameters: CandidateRequestApiAddBackgroundCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackgroundChecks>> {
            const backgroundChecks: BackgroundChecks = {
                author: requestParameters.author,
                application: requestParameters.application,
                status: requestParameters.status,
                order_number: requestParameters.order_number,
                packages: requestParameters.packages,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBackgroundCheck(requestParameters.candidateId, requestParameters.tenantAlias, backgroundChecks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update Candidate Background Check
         * @summary Background Check Status
         * @param {CandidateRequestApiUpdateBackgroundCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBackgroundCheck(requestParameters: CandidateRequestApiUpdateBackgroundCheckRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BackgroundChecks>> {
            const backgroundChecks: BackgroundChecks = {
                author: requestParameters.author,
                application: requestParameters.application,
                status: requestParameters.status,
                order_number: requestParameters.order_number,
                packages: requestParameters.packages,
                links: requestParameters.links
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBackgroundCheck(requestParameters.candidateId, requestParameters.backgroundCheckId, requestParameters.tenantAlias, backgroundChecks, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CandidateRequestApi - factory interface
 * @export
 */
export const CandidateRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CandidateRequestApiFp(configuration)
    return {
        /**
         * Add Background Check to Candidate
         * @summary Background Check Request
         * @param {CandidateRequestApiAddBackgroundCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBackgroundCheck(requestParameters: CandidateRequestApiAddBackgroundCheckRequest, options?: AxiosRequestConfig): AxiosPromise<BackgroundChecks> {
            return localVarFp.addBackgroundCheck(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Candidate Background Check
         * @summary Background Check Status
         * @param {CandidateRequestApiUpdateBackgroundCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBackgroundCheck(requestParameters: CandidateRequestApiUpdateBackgroundCheckRequest, options?: AxiosRequestConfig): AxiosPromise<BackgroundChecks> {
            return localVarFp.updateBackgroundCheck(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBackgroundCheck operation in CandidateRequestApi.
 * @export
 * @interface CandidateRequestApiAddBackgroundCheckRequest
 */
export type CandidateRequestApiAddBackgroundCheckRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CandidateRequestApiAddBackgroundCheck
    */
    readonly candidateId: string
    
    /**
    * 
    * @type {string}
    * @memberof CandidateRequestApiAddBackgroundCheck
    */
    readonly tenantAlias: string
    
} & BackgroundChecks

/**
 * Request parameters for updateBackgroundCheck operation in CandidateRequestApi.
 * @export
 * @interface CandidateRequestApiUpdateBackgroundCheckRequest
 */
export type CandidateRequestApiUpdateBackgroundCheckRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CandidateRequestApiUpdateBackgroundCheck
    */
    readonly candidateId: string
    
    /**
    * 
    * @type {string}
    * @memberof CandidateRequestApiUpdateBackgroundCheck
    */
    readonly backgroundCheckId: string
    
    /**
    * 
    * @type {string}
    * @memberof CandidateRequestApiUpdateBackgroundCheck
    */
    readonly tenantAlias: string
    
} & BackgroundChecks

/**
 * CandidateRequestApiGenerated - object-oriented interface
 * @export
 * @class CandidateRequestApiGenerated
 * @extends {BaseAPI}
 */
export class CandidateRequestApiGenerated extends BaseAPI {
    /**
     * Add Background Check to Candidate
     * @summary Background Check Request
     * @param {CandidateRequestApiAddBackgroundCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateRequestApiGenerated
     */
    public addBackgroundCheck(requestParameters: CandidateRequestApiAddBackgroundCheckRequest, options?: AxiosRequestConfig) {
        return CandidateRequestApiFp(this.configuration).addBackgroundCheck(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Candidate Background Check
     * @summary Background Check Status
     * @param {CandidateRequestApiUpdateBackgroundCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateRequestApiGenerated
     */
    public updateBackgroundCheck(requestParameters: CandidateRequestApiUpdateBackgroundCheckRequest, options?: AxiosRequestConfig) {
        return CandidateRequestApiFp(this.configuration).updateBackgroundCheck(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
