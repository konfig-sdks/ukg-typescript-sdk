/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ResultDtoClockTransactionDto } from '../models';
// @ts-ignore
import { TimeItem } from '../models';
// @ts-ignore
import { TimeItemList } from '../models';
// @ts-ignore
import { TimesheetDtoWorkSummaryDto } from '../models';
// @ts-ignore
import { WorkSummaryDto } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeApi - axios parameter creator
 * @export
 */
export const TimeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add multiple Time entries
         * @summary Add hours worked entries
         * @param {string} xCorrelationId This value MUST be supplied by the originator, used for tracing
         * @param {string} usTenantId 
         * @param {TimeItemList} timeItemList 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeEntries: async (xCorrelationId: string, usTenantId: string, timeItemList: TimeItemList, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('addTimeEntries', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'usTenantId' is not null or undefined
            assertParamExists('addTimeEntries', 'usTenantId', usTenantId)
            // verify required parameter 'timeItemList' is not null or undefined
            assertParamExists('addTimeEntries', 'timeItemList', timeItemList)
            const localVarPath = `/hoursWorked`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BasicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication basicAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "US-CUSTOMER-API-KEY", keyParamName: "basicAuth", configuration })
            if (xCorrelationId != null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (usTenantId != null) {
                localVarHeaderParameter['US-Tenant-Id'] = String(usTenantId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeItemList,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/hoursWorked',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeItemList, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain all pending clock transactions.
         * @summary Get pending clock transactions.
         * @param {string} [empName] Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
         * @param {number} [empId] Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTransactions: async (empName?: string, empId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/time/pending_clock_transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (empName !== undefined) {
                localVarQueryParameter['emp_name'] = empName;
            }

            if (empId !== undefined) {
                localVarQueryParameter['emp_id'] = empId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time/pending_clock_transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain all processed clock transactions for a given date.
         * @summary Get processed clock transactions.
         * @param {string} date Date of clock transaction
         * @param {string} [empName] Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
         * @param {number} [empId] Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessedTransactions: async (date: string, empName?: string, empId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            assertParamExists('getProcessedTransactions', 'date', date)
            const localVarPath = `/time/clock_transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (empName !== undefined) {
                localVarQueryParameter['emp_name'] = empName;
            }

            if (empId !== undefined) {
                localVarQueryParameter['emp_id'] = empId;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString() :
                    date;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time/clock_transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain work summaries between the provided date range.
         * @summary Obtain work summaries.
         * @param {string} from Start range for work summaries
         * @param {string} to End range for work summaries
         * @param {string} [empName] Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
         * @param {number} [empId] Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
         * @param {boolean} [full] Specifies if both clock and work detail data should be loaded
         * @param {boolean} [authStatus] If specified will load only work summaries with Authorized status equal to true or false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkSummaries: async (from: string, to: string, empName?: string, empId?: number, full?: boolean, authStatus?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'from' is not null or undefined
            assertParamExists('getWorkSummaries', 'from', from)
            // verify required parameter 'to' is not null or undefined
            assertParamExists('getWorkSummaries', 'to', to)
            const localVarPath = `/time/work_summaries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (empName !== undefined) {
                localVarQueryParameter['emp_name'] = empName;
            }

            if (empId !== undefined) {
                localVarQueryParameter['emp_id'] = empId;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (full !== undefined) {
                localVarQueryParameter['full'] = full;
            }

            if (authStatus !== undefined) {
                localVarQueryParameter['authStatus'] = authStatus;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time/work_summaries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Obtain a work summary by the specified id.  Will load a full work summary (includes clock and work detail information).
         * @summary Obtain a work summary.
         * @param {number} workSummaryId Work Summary id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkSummaryById: async (workSummaryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workSummaryId' is not null or undefined
            assertParamExists('getWorkSummaryById', 'workSummaryId', workSummaryId)
            const localVarPath = `/time/work_summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (workSummaryId !== undefined) {
                localVarQueryParameter['workSummaryId'] = workSummaryId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/time/work_summary',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeApi - functional programming interface
 * @export
 */
export const TimeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeApiAxiosParamCreator(configuration)
    return {
        /**
         * Add multiple Time entries
         * @summary Add hours worked entries
         * @param {TimeApiAddTimeEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTimeEntries(requestParameters: TimeApiAddTimeEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeItemList>> {
            const timeItemList: TimeItemList = {
                timeData: requestParameters.timeData
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTimeEntries(requestParameters.xCorrelationId, requestParameters.usTenantId, timeItemList, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain all pending clock transactions.
         * @summary Get pending clock transactions.
         * @param {TimeApiGetPendingTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPendingTransactions(requestParameters: TimeApiGetPendingTransactionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDtoClockTransactionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPendingTransactions(requestParameters.empName, requestParameters.empId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain all processed clock transactions for a given date.
         * @summary Get processed clock transactions.
         * @param {TimeApiGetProcessedTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProcessedTransactions(requestParameters: TimeApiGetProcessedTransactionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResultDtoClockTransactionDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessedTransactions(requestParameters.date, requestParameters.empName, requestParameters.empId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain work summaries between the provided date range.
         * @summary Obtain work summaries.
         * @param {TimeApiGetWorkSummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkSummaries(requestParameters: TimeApiGetWorkSummariesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetDtoWorkSummaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkSummaries(requestParameters.from, requestParameters.to, requestParameters.empName, requestParameters.empId, requestParameters.full, requestParameters.authStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Obtain a work summary by the specified id.  Will load a full work summary (includes clock and work detail information).
         * @summary Obtain a work summary.
         * @param {TimeApiGetWorkSummaryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorkSummaryById(requestParameters: TimeApiGetWorkSummaryByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkSummaryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkSummaryById(requestParameters.workSummaryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeApi - factory interface
 * @export
 */
export const TimeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeApiFp(configuration)
    return {
        /**
         * Add multiple Time entries
         * @summary Add hours worked entries
         * @param {TimeApiAddTimeEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeEntries(requestParameters: TimeApiAddTimeEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<TimeItemList> {
            return localVarFp.addTimeEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain all pending clock transactions.
         * @summary Get pending clock transactions.
         * @param {TimeApiGetPendingTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPendingTransactions(requestParameters: TimeApiGetPendingTransactionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ResultDtoClockTransactionDto> {
            return localVarFp.getPendingTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain all processed clock transactions for a given date.
         * @summary Get processed clock transactions.
         * @param {TimeApiGetProcessedTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProcessedTransactions(requestParameters: TimeApiGetProcessedTransactionsRequest, options?: AxiosRequestConfig): AxiosPromise<ResultDtoClockTransactionDto> {
            return localVarFp.getProcessedTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain work summaries between the provided date range.
         * @summary Obtain work summaries.
         * @param {TimeApiGetWorkSummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkSummaries(requestParameters: TimeApiGetWorkSummariesRequest, options?: AxiosRequestConfig): AxiosPromise<TimesheetDtoWorkSummaryDto> {
            return localVarFp.getWorkSummaries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Obtain a work summary by the specified id.  Will load a full work summary (includes clock and work detail information).
         * @summary Obtain a work summary.
         * @param {TimeApiGetWorkSummaryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkSummaryById(requestParameters: TimeApiGetWorkSummaryByIdRequest, options?: AxiosRequestConfig): AxiosPromise<WorkSummaryDto> {
            return localVarFp.getWorkSummaryById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTimeEntries operation in TimeApi.
 * @export
 * @interface TimeApiAddTimeEntriesRequest
 */
export type TimeApiAddTimeEntriesRequest = {
    
    /**
    * This value MUST be supplied by the originator, used for tracing
    * @type {string}
    * @memberof TimeApiAddTimeEntries
    */
    readonly xCorrelationId: string
    
    /**
    * 
    * @type {string}
    * @memberof TimeApiAddTimeEntries
    */
    readonly usTenantId: string
    
} & TimeItemList

/**
 * Request parameters for getPendingTransactions operation in TimeApi.
 * @export
 * @interface TimeApiGetPendingTransactionsRequest
 */
export type TimeApiGetPendingTransactionsRequest = {
    
    /**
    * Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
    * @type {string}
    * @memberof TimeApiGetPendingTransactions
    */
    readonly empName?: string
    
    /**
    * Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
    * @type {number}
    * @memberof TimeApiGetPendingTransactions
    */
    readonly empId?: number
    
}

/**
 * Request parameters for getProcessedTransactions operation in TimeApi.
 * @export
 * @interface TimeApiGetProcessedTransactionsRequest
 */
export type TimeApiGetProcessedTransactionsRequest = {
    
    /**
    * Date of clock transaction
    * @type {string}
    * @memberof TimeApiGetProcessedTransactions
    */
    readonly date: string
    
    /**
    * Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
    * @type {string}
    * @memberof TimeApiGetProcessedTransactions
    */
    readonly empName?: string
    
    /**
    * Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
    * @type {number}
    * @memberof TimeApiGetProcessedTransactions
    */
    readonly empId?: number
    
}

/**
 * Request parameters for getWorkSummaries operation in TimeApi.
 * @export
 * @interface TimeApiGetWorkSummariesRequest
 */
export type TimeApiGetWorkSummariesRequest = {
    
    /**
    * Start range for work summaries
    * @type {string}
    * @memberof TimeApiGetWorkSummaries
    */
    readonly from: string
    
    /**
    * End range for work summaries
    * @type {string}
    * @memberof TimeApiGetWorkSummaries
    */
    readonly to: string
    
    /**
    * Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
    * @type {string}
    * @memberof TimeApiGetWorkSummaries
    */
    readonly empName?: string
    
    /**
    * Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified.
    * @type {number}
    * @memberof TimeApiGetWorkSummaries
    */
    readonly empId?: number
    
    /**
    * Specifies if both clock and work detail data should be loaded
    * @type {boolean}
    * @memberof TimeApiGetWorkSummaries
    */
    readonly full?: boolean
    
    /**
    * If specified will load only work summaries with Authorized status equal to true or false
    * @type {boolean}
    * @memberof TimeApiGetWorkSummaries
    */
    readonly authStatus?: boolean
    
}

/**
 * Request parameters for getWorkSummaryById operation in TimeApi.
 * @export
 * @interface TimeApiGetWorkSummaryByIdRequest
 */
export type TimeApiGetWorkSummaryByIdRequest = {
    
    /**
    * Work Summary id
    * @type {number}
    * @memberof TimeApiGetWorkSummaryById
    */
    readonly workSummaryId: number
    
}

/**
 * TimeApiGenerated - object-oriented interface
 * @export
 * @class TimeApiGenerated
 * @extends {BaseAPI}
 */
export class TimeApiGenerated extends BaseAPI {
    /**
     * Add multiple Time entries
     * @summary Add hours worked entries
     * @param {TimeApiAddTimeEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApiGenerated
     */
    public addTimeEntries(requestParameters: TimeApiAddTimeEntriesRequest, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).addTimeEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain all pending clock transactions.
     * @summary Get pending clock transactions.
     * @param {TimeApiGetPendingTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApiGenerated
     */
    public getPendingTransactions(requestParameters: TimeApiGetPendingTransactionsRequest = {}, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).getPendingTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain all processed clock transactions for a given date.
     * @summary Get processed clock transactions.
     * @param {TimeApiGetProcessedTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApiGenerated
     */
    public getProcessedTransactions(requestParameters: TimeApiGetProcessedTransactionsRequest, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).getProcessedTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain work summaries between the provided date range.
     * @summary Obtain work summaries.
     * @param {TimeApiGetWorkSummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApiGenerated
     */
    public getWorkSummaries(requestParameters: TimeApiGetWorkSummariesRequest, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).getWorkSummaries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Obtain a work summary by the specified id.  Will load a full work summary (includes clock and work detail information).
     * @summary Obtain a work summary.
     * @param {TimeApiGetWorkSummaryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeApiGenerated
     */
    public getWorkSummaryById(requestParameters: TimeApiGetWorkSummaryByIdRequest, options?: AxiosRequestConfig) {
        return TimeApiFp(this.configuration).getWorkSummaryById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
