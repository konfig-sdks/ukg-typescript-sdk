/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GeneralLedgerRunDetailsV2 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GeneralLedgerRunDetailsV2Api - axios parameter creator
 * @export
 */
export const GeneralLedgerRunDetailsV2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
         * @param {string} [runId] 
         * @param {string} [blockId] 
         * @param {string} [mostRecent] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (runId?: string, blockId?: string, mostRecent?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/payroll/v2/general-ledger`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (runId !== undefined) {
                localVarQueryParameter['runId'] = runId;
            }

            if (blockId !== undefined) {
                localVarQueryParameter['blockId'] = blockId;
            }

            if (mostRecent !== undefined) {
                localVarQueryParameter['mostRecent'] = mostRecent;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v2/general-ledger',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
         * @param {string} runId 
         * @param {string} [runId2] 
         * @param {string} [blockId] 
         * @param {string} [mostRecent] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByRunId: async (runId: string, runId2?: string, blockId?: string, mostRecent?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'runId' is not null or undefined
            assertParamExists('getByRunId', 'runId', runId)
            const localVarPath = `/payroll/v2/general-ledger/{runId}`
                .replace(`{${"runId"}}`, encodeURIComponent(String(runId !== undefined ? runId : `-runId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (runId2 !== undefined) {
                localVarQueryParameter['runId'] = runId2;
            }

            if (blockId !== undefined) {
                localVarQueryParameter['blockId'] = blockId;
            }

            if (mostRecent !== undefined) {
                localVarQueryParameter['mostRecent'] = mostRecent;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v2/general-ledger/{runId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GeneralLedgerRunDetailsV2Api - functional programming interface
 * @export
 */
export const GeneralLedgerRunDetailsV2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GeneralLedgerRunDetailsV2ApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
         * @param {GeneralLedgerRunDetailsV2ApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: GeneralLedgerRunDetailsV2ApiGetRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GeneralLedgerRunDetailsV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.runId, requestParameters.blockId, requestParameters.mostRecent, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
         * @param {GeneralLedgerRunDetailsV2ApiGetByRunIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByRunId(requestParameters: GeneralLedgerRunDetailsV2ApiGetByRunIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GeneralLedgerRunDetailsV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByRunId(requestParameters.runId, requestParameters.runId2, requestParameters.blockId, requestParameters.mostRecent, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GeneralLedgerRunDetailsV2Api - factory interface
 * @export
 */
export const GeneralLedgerRunDetailsV2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GeneralLedgerRunDetailsV2ApiFp(configuration)
    return {
        /**
         * 
         * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
         * @param {GeneralLedgerRunDetailsV2ApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: GeneralLedgerRunDetailsV2ApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<GeneralLedgerRunDetailsV2>> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
         * @param {GeneralLedgerRunDetailsV2ApiGetByRunIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByRunId(requestParameters: GeneralLedgerRunDetailsV2ApiGetByRunIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<GeneralLedgerRunDetailsV2>> {
            return localVarFp.getByRunId(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in GeneralLedgerRunDetailsV2Api.
 * @export
 * @interface GeneralLedgerRunDetailsV2ApiGetRequest
 */
export type GeneralLedgerRunDetailsV2ApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GeneralLedgerRunDetailsV2ApiGet
    */
    readonly runId?: string
    
    /**
    * 
    * @type {string}
    * @memberof GeneralLedgerRunDetailsV2ApiGet
    */
    readonly blockId?: string
    
    /**
    * 
    * @type {string}
    * @memberof GeneralLedgerRunDetailsV2ApiGet
    */
    readonly mostRecent?: string
    
    /**
    * 
    * @type {number}
    * @memberof GeneralLedgerRunDetailsV2ApiGet
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof GeneralLedgerRunDetailsV2ApiGet
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getByRunId operation in GeneralLedgerRunDetailsV2Api.
 * @export
 * @interface GeneralLedgerRunDetailsV2ApiGetByRunIdRequest
 */
export type GeneralLedgerRunDetailsV2ApiGetByRunIdRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof GeneralLedgerRunDetailsV2ApiGetByRunId
    */
    readonly runId: string
    
    /**
    * 
    * @type {string}
    * @memberof GeneralLedgerRunDetailsV2ApiGetByRunId
    */
    readonly runId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof GeneralLedgerRunDetailsV2ApiGetByRunId
    */
    readonly blockId?: string
    
    /**
    * 
    * @type {string}
    * @memberof GeneralLedgerRunDetailsV2ApiGetByRunId
    */
    readonly mostRecent?: string
    
    /**
    * 
    * @type {number}
    * @memberof GeneralLedgerRunDetailsV2ApiGetByRunId
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof GeneralLedgerRunDetailsV2ApiGetByRunId
    */
    readonly perPage?: number
    
}

/**
 * GeneralLedgerRunDetailsV2ApiGenerated - object-oriented interface
 * @export
 * @class GeneralLedgerRunDetailsV2ApiGenerated
 * @extends {BaseAPI}
 */
export class GeneralLedgerRunDetailsV2ApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
     * @param {GeneralLedgerRunDetailsV2ApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerRunDetailsV2ApiGenerated
     */
    public get(requestParameters: GeneralLedgerRunDetailsV2ApiGetRequest = {}, options?: AxiosRequestConfig) {
        return GeneralLedgerRunDetailsV2ApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of details for a general ledger run, filterable by runId and blockId
     * @param {GeneralLedgerRunDetailsV2ApiGetByRunIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GeneralLedgerRunDetailsV2ApiGenerated
     */
    public getByRunId(requestParameters: GeneralLedgerRunDetailsV2ApiGetByRunIdRequest, options?: AxiosRequestConfig) {
        return GeneralLedgerRunDetailsV2ApiFp(this.configuration).getByRunId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
