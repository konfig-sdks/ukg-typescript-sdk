/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeMultipleJobs } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeMultipleJobsOPPApi - axios parameter creator
 * @export
 */
export const EmployeeMultipleJobsOPPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   Correct syntax when using parameters are as follows:  <ul> <li>Get Multiple jobs for employee ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}</li> </ul> </li> <li>Get Multiple jobs for company ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs for employee ID and company Id <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}&companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs per page <ul> <li>Example: /personnel/v1/empl-multiple-jobs?page=1&per_page=10000</li> </ul> </li> </ul> 
         * @summary Get employee multiple jobs details
         * @param {string} [employeeId] 
         * @param {string} [companyId] 
         * @param {string} [jobCode] 
         * @param {string} [isPrimaryJob] 
         * @param {string} [jobIsInActive] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails: async (employeeId?: string, companyId?: string, jobCode?: string, isPrimaryJob?: string, jobIsInActive?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personnel/v1/empl-multiple-jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (jobCode !== undefined) {
                localVarQueryParameter['jobCode'] = jobCode;
            }

            if (isPrimaryJob !== undefined) {
                localVarQueryParameter['isPrimaryJob'] = isPrimaryJob;
            }

            if (jobIsInActive !== undefined) {
                localVarQueryParameter['jobIsInActive'] = jobIsInActive;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/empl-multiple-jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeMultipleJobsOPPApi - functional programming interface
 * @export
 */
export const EmployeeMultipleJobsOPPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeMultipleJobsOPPApiAxiosParamCreator(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   Correct syntax when using parameters are as follows:  <ul> <li>Get Multiple jobs for employee ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}</li> </ul> </li> <li>Get Multiple jobs for company ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs for employee ID and company Id <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}&companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs per page <ul> <li>Example: /personnel/v1/empl-multiple-jobs?page=1&per_page=10000</li> </ul> </li> </ul> 
         * @summary Get employee multiple jobs details
         * @param {EmployeeMultipleJobsOPPApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDetails(requestParameters: EmployeeMultipleJobsOPPApiListDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeMultipleJobs>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDetails(requestParameters.employeeId, requestParameters.companyId, requestParameters.jobCode, requestParameters.isPrimaryJob, requestParameters.jobIsInActive, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeMultipleJobsOPPApi - factory interface
 * @export
 */
export const EmployeeMultipleJobsOPPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeMultipleJobsOPPApiFp(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   Correct syntax when using parameters are as follows:  <ul> <li>Get Multiple jobs for employee ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}</li> </ul> </li> <li>Get Multiple jobs for company ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs for employee ID and company Id <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}&companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs per page <ul> <li>Example: /personnel/v1/empl-multiple-jobs?page=1&per_page=10000</li> </ul> </li> </ul> 
         * @summary Get employee multiple jobs details
         * @param {EmployeeMultipleJobsOPPApiListDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDetails(requestParameters: EmployeeMultipleJobsOPPApiListDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeMultipleJobs>> {
            return localVarFp.listDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listDetails operation in EmployeeMultipleJobsOPPApi.
 * @export
 * @interface EmployeeMultipleJobsOPPApiListDetailsRequest
 */
export type EmployeeMultipleJobsOPPApiListDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeMultipleJobsOPPApiListDetails
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeMultipleJobsOPPApiListDetails
    */
    readonly companyId?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeMultipleJobsOPPApiListDetails
    */
    readonly jobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeMultipleJobsOPPApiListDetails
    */
    readonly isPrimaryJob?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeMultipleJobsOPPApiListDetails
    */
    readonly jobIsInActive?: string
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeMultipleJobsOPPApiListDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeMultipleJobsOPPApiListDetails
    */
    readonly perPage?: number
    
}

/**
 * EmployeeMultipleJobsOPPApiGenerated - object-oriented interface
 * @export
 * @class EmployeeMultipleJobsOPPApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeMultipleJobsOPPApiGenerated extends BaseAPI {
    /**
     * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   Correct syntax when using parameters are as follows:  <ul> <li>Get Multiple jobs for employee ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}</li> </ul> </li> <li>Get Multiple jobs for company ID <ul> <li>Example: /personnel/v1/empl-multiple-jobs?companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs for employee ID and company Id <ul> <li>Example: /personnel/v1/empl-multiple-jobs?employeeId={employeeId}&companyId={companyId}</li> </ul> </li> <li>Get Multiple jobs per page <ul> <li>Example: /personnel/v1/empl-multiple-jobs?page=1&per_page=10000</li> </ul> </li> </ul> 
     * @summary Get employee multiple jobs details
     * @param {EmployeeMultipleJobsOPPApiListDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeMultipleJobsOPPApiGenerated
     */
    public listDetails(requestParameters: EmployeeMultipleJobsOPPApiListDetailsRequest = {}, options?: AxiosRequestConfig) {
        return EmployeeMultipleJobsOPPApiFp(this.configuration).listDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
