/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { NewHiresCreateSingleNewHire201Response } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHire400Response } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHire409Response } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHireRequest } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHireRequestCompensation } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHireRequestContactInformation } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHireRequestJob } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHireRequestMentor } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHireRequestOrganizationLevelsInner } from '../models';
// @ts-ignore
import { NewHiresCreateSingleNewHireResponse } from '../models';
// @ts-ignore
import { NewHiresGetById200Response } from '../models';
// @ts-ignore
import { NewHiresGetById404Response } from '../models';
// @ts-ignore
import { NewHiresGetByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * NewHiresApi - axios parameter creator
 * @export
 */
export const NewHiresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a single New Hire
         * @summary Creates a single New Hire
         * @param {string} tenantIdentifier Unique identifier of the tenant to interact with. Can be either the tenant alias or tenant ID.
         * @param {NewHiresCreateSingleNewHireRequest} newHiresCreateSingleNewHireRequest New Hire object to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSingleNewHire: async (tenantIdentifier: string, newHiresCreateSingleNewHireRequest: NewHiresCreateSingleNewHireRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantIdentifier' is not null or undefined
            assertParamExists('createSingleNewHire', 'tenantIdentifier', tenantIdentifier)
            // verify required parameter 'newHiresCreateSingleNewHireRequest' is not null or undefined
            assertParamExists('createSingleNewHire', 'newHiresCreateSingleNewHireRequest', newHiresCreateSingleNewHireRequest)
            const localVarPath = `/tenants/{tenantIdentifier}/new-hires`
                .replace(`{${"tenantIdentifier"}}`, encodeURIComponent(String(tenantIdentifier !== undefined ? tenantIdentifier : `-tenantIdentifier-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newHiresCreateSingleNewHireRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tenants/{tenantIdentifier}/new-hires',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newHiresCreateSingleNewHireRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a single New Hire by Id
         * @summary Gets a single New Hire by Id
         * @param {string} tenantIdentifier Unique identifier of the tenant to interact with. Can be either the tenant alias or tenant ID.
         * @param {string} id Unique identifier for the New Hire
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (tenantIdentifier: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantIdentifier' is not null or undefined
            assertParamExists('getById', 'tenantIdentifier', tenantIdentifier)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getById', 'id', id)
            const localVarPath = `/tenants/{tenantIdentifier}/new-hires/{id}`
                .replace(`{${"tenantIdentifier"}}`, encodeURIComponent(String(tenantIdentifier !== undefined ? tenantIdentifier : `-tenantIdentifier-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/tenants/{tenantIdentifier}/new-hires/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewHiresApi - functional programming interface
 * @export
 */
export const NewHiresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewHiresApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a single New Hire
         * @summary Creates a single New Hire
         * @param {NewHiresApiCreateSingleNewHireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSingleNewHire(requestParameters: NewHiresApiCreateSingleNewHireRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewHiresCreateSingleNewHireResponse>> {
            const newHiresCreateSingleNewHireRequest: NewHiresCreateSingleNewHireRequest = {
                contactInformation: requestParameters.contactInformation,
                job: requestParameters.job,
                organizationLevels: requestParameters.organizationLevels,
                compensation: requestParameters.compensation,
                onboardingOwnerId: requestParameters.onboardingOwnerId,
                hireDate: requestParameters.hireDate,
                orientationDate: requestParameters.orientationDate,
                startDate: requestParameters.startDate,
                pastStartDateReason: requestParameters.pastStartDateReason,
                mentor: requestParameters.mentor,
                personalMessage: requestParameters.personalMessage
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSingleNewHire(requestParameters.tenantIdentifier, newHiresCreateSingleNewHireRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a single New Hire by Id
         * @summary Gets a single New Hire by Id
         * @param {NewHiresApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: NewHiresApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewHiresGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.tenantIdentifier, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewHiresApi - factory interface
 * @export
 */
export const NewHiresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewHiresApiFp(configuration)
    return {
        /**
         * Creates a single New Hire
         * @summary Creates a single New Hire
         * @param {NewHiresApiCreateSingleNewHireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSingleNewHire(requestParameters: NewHiresApiCreateSingleNewHireRequest, options?: AxiosRequestConfig): AxiosPromise<NewHiresCreateSingleNewHireResponse> {
            return localVarFp.createSingleNewHire(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a single New Hire by Id
         * @summary Gets a single New Hire by Id
         * @param {NewHiresApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: NewHiresApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<NewHiresGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSingleNewHire operation in NewHiresApi.
 * @export
 * @interface NewHiresApiCreateSingleNewHireRequest
 */
export type NewHiresApiCreateSingleNewHireRequest = {
    
    /**
    * Unique identifier of the tenant to interact with. Can be either the tenant alias or tenant ID.
    * @type {string}
    * @memberof NewHiresApiCreateSingleNewHire
    */
    readonly tenantIdentifier: string
    
} & NewHiresCreateSingleNewHireRequest

/**
 * Request parameters for getById operation in NewHiresApi.
 * @export
 * @interface NewHiresApiGetByIdRequest
 */
export type NewHiresApiGetByIdRequest = {
    
    /**
    * Unique identifier of the tenant to interact with. Can be either the tenant alias or tenant ID.
    * @type {string}
    * @memberof NewHiresApiGetById
    */
    readonly tenantIdentifier: string
    
    /**
    * Unique identifier for the New Hire
    * @type {string}
    * @memberof NewHiresApiGetById
    */
    readonly id: string
    
}

/**
 * NewHiresApiGenerated - object-oriented interface
 * @export
 * @class NewHiresApiGenerated
 * @extends {BaseAPI}
 */
export class NewHiresApiGenerated extends BaseAPI {
    /**
     * Creates a single New Hire
     * @summary Creates a single New Hire
     * @param {NewHiresApiCreateSingleNewHireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewHiresApiGenerated
     */
    public createSingleNewHire(requestParameters: NewHiresApiCreateSingleNewHireRequest, options?: AxiosRequestConfig) {
        return NewHiresApiFp(this.configuration).createSingleNewHire(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a single New Hire by Id
     * @summary Gets a single New Hire by Id
     * @param {NewHiresApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewHiresApiGenerated
     */
    public getById(requestParameters: NewHiresApiGetByIdRequest, options?: AxiosRequestConfig) {
        return NewHiresApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
