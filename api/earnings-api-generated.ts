/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Earning } from '../models';
// @ts-ignore
import { EarningStatusResponse } from '../models';
// @ts-ignore
import { EarningsAddTimeClockDataRequest } from '../models';
// @ts-ignore
import { EarningsAddTimeClockDataResponse } from '../models';
// @ts-ignore
import { EarningsDto } from '../models';
// @ts-ignore
import { ErrorDetails } from '../models';
// @ts-ignore
import { ErrorStatusResponse } from '../models';
// @ts-ignore
import { MultiStatusResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EarningsApi - axios parameter creator
 * @export
 */
export const EarningsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add UKG Pro time clock data
         * @param {string} xCorrelationId 
         * @param {string} usClientId 
         * @param {EarningsAddTimeClockDataRequest} earningsAddTimeClockDataRequest Add earnings from WFM for the purpose of processing payroll.
         * @param {boolean} [failAllOnRequest] failAllOnRequest, evaluating this to true will cause the entire request to fail given any errors, otherwise valid earnings will be staged for import.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeClockData: async (xCorrelationId: string, usClientId: string, earningsAddTimeClockDataRequest: EarningsAddTimeClockDataRequest, failAllOnRequest?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('addTimeClockData', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'usClientId' is not null or undefined
            assertParamExists('addTimeClockData', 'usClientId', usClientId)
            // verify required parameter 'earningsAddTimeClockDataRequest' is not null or undefined
            assertParamExists('addTimeClockData', 'earningsAddTimeClockDataRequest', earningsAddTimeClockDataRequest)
            const localVarPath = `/services/payroll/v1/import-pay-items/earnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "US-CUSTOMER-API-KEY", keyParamName: "basicAuth", configuration })
            if (failAllOnRequest !== undefined) {
                localVarQueryParameter['failAllOnRequest'] = failAllOnRequest;
            }

            if (xCorrelationId != null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (usClientId != null) {
                localVarHeaderParameter['US-Client-Id'] = String(usClientId);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: earningsAddTimeClockDataRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/services/payroll/v1/import-pay-items/earnings',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(earningsAddTimeClockDataRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a earning
         * @param {string} xCorrelationId 
         * @param {string} usClientId 
         * @param {string} refId Earning unique Identifier for earning
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEarning: async (xCorrelationId: string, usClientId: string, refId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('deleteEarning', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'usClientId' is not null or undefined
            assertParamExists('deleteEarning', 'usClientId', usClientId)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('deleteEarning', 'refId', refId)
            const localVarPath = `/services/payroll/v1/import-pay-items/earnings/{refId}`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId !== undefined ? refId : `-refId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "US-CUSTOMER-API-KEY", keyParamName: "basicAuth", configuration })
            if (xCorrelationId != null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (usClientId != null) {
                localVarHeaderParameter['US-Client-Id'] = String(usClientId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/services/payroll/v1/import-pay-items/earnings/{refId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all the earning configuration filtered by the parameter(s) passed. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get list of earnings configurations filtered by Parameter including pagination params
         * @param {string} calculationRule 
         * @param {string} taxCategory 
         * @param {string} useDeductionOffset 
         * @param {string} countryCode 
         * @param {string} includeInShiftDiffrential 
         * @param {string} includeInManualCheck 
         * @param {string} [earningCode] 
         * @param {string} [includeInAccruals] 
         * @param {boolean} [includeInDeferredCompensation] 
         * @param {boolean} [includeInDeferredCompensationHours] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsFilteredByParameter: async (calculationRule: string, taxCategory: string, useDeductionOffset: string, countryCode: string, includeInShiftDiffrential: string, includeInManualCheck: string, earningCode?: string, includeInAccruals?: string, includeInDeferredCompensation?: boolean, includeInDeferredCompensationHours?: boolean, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'calculationRule' is not null or undefined
            assertParamExists('getConfigurationsFilteredByParameter', 'calculationRule', calculationRule)
            // verify required parameter 'taxCategory' is not null or undefined
            assertParamExists('getConfigurationsFilteredByParameter', 'taxCategory', taxCategory)
            // verify required parameter 'useDeductionOffset' is not null or undefined
            assertParamExists('getConfigurationsFilteredByParameter', 'useDeductionOffset', useDeductionOffset)
            // verify required parameter 'countryCode' is not null or undefined
            assertParamExists('getConfigurationsFilteredByParameter', 'countryCode', countryCode)
            // verify required parameter 'includeInShiftDiffrential' is not null or undefined
            assertParamExists('getConfigurationsFilteredByParameter', 'includeInShiftDiffrential', includeInShiftDiffrential)
            // verify required parameter 'includeInManualCheck' is not null or undefined
            assertParamExists('getConfigurationsFilteredByParameter', 'includeInManualCheck', includeInManualCheck)
            const localVarPath = `/configuration/v1/earnings/{calculationRule}/{taxCategory}/{useDeductionOffset}/{countryCode}/{includeInShiftDiffrential}/{includeInManualCheck}`
                .replace(`{${"calculationRule"}}`, encodeURIComponent(String(calculationRule !== undefined ? calculationRule : `-calculationRule-`)))
                .replace(`{${"taxCategory"}}`, encodeURIComponent(String(taxCategory !== undefined ? taxCategory : `-taxCategory-`)))
                .replace(`{${"useDeductionOffset"}}`, encodeURIComponent(String(useDeductionOffset !== undefined ? useDeductionOffset : `-useDeductionOffset-`)))
                .replace(`{${"countryCode"}}`, encodeURIComponent(String(countryCode !== undefined ? countryCode : `-countryCode-`)))
                .replace(`{${"includeInShiftDiffrential"}}`, encodeURIComponent(String(includeInShiftDiffrential !== undefined ? includeInShiftDiffrential : `-includeInShiftDiffrential-`)))
                .replace(`{${"includeInManualCheck"}}`, encodeURIComponent(String(includeInManualCheck !== undefined ? includeInManualCheck : `-includeInManualCheck-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (earningCode !== undefined) {
                localVarQueryParameter['earningCode'] = earningCode;
            }

            if (includeInAccruals !== undefined) {
                localVarQueryParameter['includeInAccruals'] = includeInAccruals;
            }

            if (includeInDeferredCompensation !== undefined) {
                localVarQueryParameter['includeInDeferredCompensation'] = includeInDeferredCompensation;
            }

            if (includeInDeferredCompensationHours !== undefined) {
                localVarQueryParameter['includeInDeferredCompensationHours'] = includeInDeferredCompensationHours;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/configuration/v1/earnings/{calculationRule}/{taxCategory}/{useDeductionOffset}/{countryCode}/{includeInShiftDiffrential}/{includeInManualCheck}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status details for specified earning
         * @param {string} xCorrelationId 
         * @param {string} usClientId 
         * @param {string} refId Earning unique Identifier for earning
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusDetails: async (xCorrelationId: string, usClientId: string, refId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xCorrelationId' is not null or undefined
            assertParamExists('getStatusDetails', 'xCorrelationId', xCorrelationId)
            // verify required parameter 'usClientId' is not null or undefined
            assertParamExists('getStatusDetails', 'usClientId', usClientId)
            // verify required parameter 'refId' is not null or undefined
            assertParamExists('getStatusDetails', 'refId', refId)
            const localVarPath = `/services/payroll/v1/import-pay-items/earnings/{refId}`
                .replace(`{${"refId"}}`, encodeURIComponent(String(refId !== undefined ? refId : `-refId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "US-CUSTOMER-API-KEY", keyParamName: "basicAuth", configuration })
            if (xCorrelationId != null) {
                localVarHeaderParameter['X-Correlation-Id'] = String(xCorrelationId);
            }

            if (usClientId != null) {
                localVarHeaderParameter['US-Client-Id'] = String(usClientId);
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/services/payroll/v1/import-pay-items/earnings/{refId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of all earnings configuration setup at company level. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get a list of all earnings configurations
         * @param {string} [calculationRule] 
         * @param {string} [taxCategory] 
         * @param {string} [useDeductionOffset] 
         * @param {string} [countryCode] 
         * @param {string} [includeInShiftDiffrential] 
         * @param {string} [includeInManualCheck] 
         * @param {string} [earningCode] 
         * @param {string} [includeInAccruals] 
         * @param {boolean} [includeInDeferredCompensation] 
         * @param {boolean} [includeInDeferredCompensationHours] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEarningsConfigurations: async (calculationRule?: string, taxCategory?: string, useDeductionOffset?: string, countryCode?: string, includeInShiftDiffrential?: string, includeInManualCheck?: string, earningCode?: string, includeInAccruals?: string, includeInDeferredCompensation?: boolean, includeInDeferredCompensationHours?: boolean, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/configuration/v1/earnings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (calculationRule !== undefined) {
                localVarQueryParameter['calculationRule'] = calculationRule;
            }

            if (taxCategory !== undefined) {
                localVarQueryParameter['taxCategory'] = taxCategory;
            }

            if (useDeductionOffset !== undefined) {
                localVarQueryParameter['useDeductionOffset'] = useDeductionOffset;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (includeInShiftDiffrential !== undefined) {
                localVarQueryParameter['includeInShiftDiffrential'] = includeInShiftDiffrential;
            }

            if (includeInManualCheck !== undefined) {
                localVarQueryParameter['includeInManualCheck'] = includeInManualCheck;
            }

            if (earningCode !== undefined) {
                localVarQueryParameter['earningCode'] = earningCode;
            }

            if (includeInAccruals !== undefined) {
                localVarQueryParameter['includeInAccruals'] = includeInAccruals;
            }

            if (includeInDeferredCompensation !== undefined) {
                localVarQueryParameter['includeInDeferredCompensation'] = includeInDeferredCompensation;
            }

            if (includeInDeferredCompensationHours !== undefined) {
                localVarQueryParameter['includeInDeferredCompensationHours'] = includeInDeferredCompensationHours;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/configuration/v1/earnings',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details of the earning configuration requested. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get a specific earning configuration
         * @param {string} earningCode 
         * @param {string} [calculationRule] 
         * @param {string} [taxCategory] 
         * @param {string} [useDeductionOffset] 
         * @param {string} [countryCode] 
         * @param {string} [includeInShiftDiffrential] 
         * @param {string} [includeInManualCheck] 
         * @param {string} [earningCode2] 
         * @param {string} [includeInAccruals] 
         * @param {boolean} [includeInDeferredCompensation] 
         * @param {boolean} [includeInDeferredCompensationHours] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificConfigurationGet: async (earningCode: string, calculationRule?: string, taxCategory?: string, useDeductionOffset?: string, countryCode?: string, includeInShiftDiffrential?: string, includeInManualCheck?: string, earningCode2?: string, includeInAccruals?: string, includeInDeferredCompensation?: boolean, includeInDeferredCompensationHours?: boolean, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'earningCode' is not null or undefined
            assertParamExists('specificConfigurationGet', 'earningCode', earningCode)
            const localVarPath = `/configuration/v1/earnings/{earningCode}`
                .replace(`{${"earningCode"}}`, encodeURIComponent(String(earningCode !== undefined ? earningCode : `-earningCode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (calculationRule !== undefined) {
                localVarQueryParameter['calculationRule'] = calculationRule;
            }

            if (taxCategory !== undefined) {
                localVarQueryParameter['taxCategory'] = taxCategory;
            }

            if (useDeductionOffset !== undefined) {
                localVarQueryParameter['useDeductionOffset'] = useDeductionOffset;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (includeInShiftDiffrential !== undefined) {
                localVarQueryParameter['includeInShiftDiffrential'] = includeInShiftDiffrential;
            }

            if (includeInManualCheck !== undefined) {
                localVarQueryParameter['includeInManualCheck'] = includeInManualCheck;
            }

            if (earningCode2 !== undefined) {
                localVarQueryParameter['earningCode'] = earningCode2;
            }

            if (includeInAccruals !== undefined) {
                localVarQueryParameter['includeInAccruals'] = includeInAccruals;
            }

            if (includeInDeferredCompensation !== undefined) {
                localVarQueryParameter['includeInDeferredCompensation'] = includeInDeferredCompensation;
            }

            if (includeInDeferredCompensationHours !== undefined) {
                localVarQueryParameter['includeInDeferredCompensationHours'] = includeInDeferredCompensationHours;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/configuration/v1/earnings/{earningCode}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EarningsApi - functional programming interface
 * @export
 */
export const EarningsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EarningsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add UKG Pro time clock data
         * @param {EarningsApiAddTimeClockDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTimeClockData(requestParameters: EarningsApiAddTimeClockDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningsAddTimeClockDataResponse>> {
            const earningsAddTimeClockDataRequest: EarningsAddTimeClockDataRequest = {
                earnings: requestParameters.earnings
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTimeClockData(requestParameters.xCorrelationId, requestParameters.usClientId, earningsAddTimeClockDataRequest, requestParameters.failAllOnRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a earning
         * @param {EarningsApiDeleteEarningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEarning(requestParameters: EarningsApiDeleteEarningRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEarning(requestParameters.xCorrelationId, requestParameters.usClientId, requestParameters.refId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all the earning configuration filtered by the parameter(s) passed. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get list of earnings configurations filtered by Parameter including pagination params
         * @param {EarningsApiGetConfigurationsFilteredByParameterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigurationsFilteredByParameter(requestParameters: EarningsApiGetConfigurationsFilteredByParameterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EarningsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigurationsFilteredByParameter(requestParameters.calculationRule, requestParameters.taxCategory, requestParameters.useDeductionOffset, requestParameters.countryCode, requestParameters.includeInShiftDiffrential, requestParameters.includeInManualCheck, requestParameters.earningCode, requestParameters.includeInAccruals, requestParameters.includeInDeferredCompensation, requestParameters.includeInDeferredCompensationHours, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get status details for specified earning
         * @param {EarningsApiGetStatusDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatusDetails(requestParameters: EarningsApiGetStatusDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EarningStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatusDetails(requestParameters.xCorrelationId, requestParameters.usClientId, requestParameters.refId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details of all earnings configuration setup at company level. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get a list of all earnings configurations
         * @param {EarningsApiListEarningsConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEarningsConfigurations(requestParameters: EarningsApiListEarningsConfigurationsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EarningsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEarningsConfigurations(requestParameters.calculationRule, requestParameters.taxCategory, requestParameters.useDeductionOffset, requestParameters.countryCode, requestParameters.includeInShiftDiffrential, requestParameters.includeInManualCheck, requestParameters.earningCode, requestParameters.includeInAccruals, requestParameters.includeInDeferredCompensation, requestParameters.includeInDeferredCompensationHours, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get details of the earning configuration requested. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get a specific earning configuration
         * @param {EarningsApiSpecificConfigurationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async specificConfigurationGet(requestParameters: EarningsApiSpecificConfigurationGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EarningsDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.specificConfigurationGet(requestParameters.earningCode, requestParameters.calculationRule, requestParameters.taxCategory, requestParameters.useDeductionOffset, requestParameters.countryCode, requestParameters.includeInShiftDiffrential, requestParameters.includeInManualCheck, requestParameters.earningCode2, requestParameters.includeInAccruals, requestParameters.includeInDeferredCompensation, requestParameters.includeInDeferredCompensationHours, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EarningsApi - factory interface
 * @export
 */
export const EarningsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EarningsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add UKG Pro time clock data
         * @param {EarningsApiAddTimeClockDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeClockData(requestParameters: EarningsApiAddTimeClockDataRequest, options?: AxiosRequestConfig): AxiosPromise<EarningsAddTimeClockDataResponse> {
            return localVarFp.addTimeClockData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a earning
         * @param {EarningsApiDeleteEarningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEarning(requestParameters: EarningsApiDeleteEarningRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEarning(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all the earning configuration filtered by the parameter(s) passed. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get list of earnings configurations filtered by Parameter including pagination params
         * @param {EarningsApiGetConfigurationsFilteredByParameterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigurationsFilteredByParameter(requestParameters: EarningsApiGetConfigurationsFilteredByParameterRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EarningsDto>> {
            return localVarFp.getConfigurationsFilteredByParameter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status details for specified earning
         * @param {EarningsApiGetStatusDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusDetails(requestParameters: EarningsApiGetStatusDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<EarningStatusResponse> {
            return localVarFp.getStatusDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of all earnings configuration setup at company level. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get a list of all earnings configurations
         * @param {EarningsApiListEarningsConfigurationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEarningsConfigurations(requestParameters: EarningsApiListEarningsConfigurationsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EarningsDto>> {
            return localVarFp.listEarningsConfigurations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details of the earning configuration requested. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
         * @summary Get a specific earning configuration
         * @param {EarningsApiSpecificConfigurationGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        specificConfigurationGet(requestParameters: EarningsApiSpecificConfigurationGetRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EarningsDto>> {
            return localVarFp.specificConfigurationGet(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTimeClockData operation in EarningsApi.
 * @export
 * @interface EarningsApiAddTimeClockDataRequest
 */
export type EarningsApiAddTimeClockDataRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiAddTimeClockData
    */
    readonly xCorrelationId: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiAddTimeClockData
    */
    readonly usClientId: string
    
    /**
    * failAllOnRequest, evaluating this to true will cause the entire request to fail given any errors, otherwise valid earnings will be staged for import.
    * @type {boolean}
    * @memberof EarningsApiAddTimeClockData
    */
    readonly failAllOnRequest?: boolean
    
} & EarningsAddTimeClockDataRequest

/**
 * Request parameters for deleteEarning operation in EarningsApi.
 * @export
 * @interface EarningsApiDeleteEarningRequest
 */
export type EarningsApiDeleteEarningRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiDeleteEarning
    */
    readonly xCorrelationId: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiDeleteEarning
    */
    readonly usClientId: string
    
    /**
    * Earning unique Identifier for earning
    * @type {string}
    * @memberof EarningsApiDeleteEarning
    */
    readonly refId: string
    
}

/**
 * Request parameters for getConfigurationsFilteredByParameter operation in EarningsApi.
 * @export
 * @interface EarningsApiGetConfigurationsFilteredByParameterRequest
 */
export type EarningsApiGetConfigurationsFilteredByParameterRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly calculationRule: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly taxCategory: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly useDeductionOffset: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly countryCode: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly includeInShiftDiffrential: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly includeInManualCheck: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly earningCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly includeInAccruals?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly includeInDeferredCompensation?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly includeInDeferredCompensationHours?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EarningsApiGetConfigurationsFilteredByParameter
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getStatusDetails operation in EarningsApi.
 * @export
 * @interface EarningsApiGetStatusDetailsRequest
 */
export type EarningsApiGetStatusDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetStatusDetails
    */
    readonly xCorrelationId: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiGetStatusDetails
    */
    readonly usClientId: string
    
    /**
    * Earning unique Identifier for earning
    * @type {string}
    * @memberof EarningsApiGetStatusDetails
    */
    readonly refId: string
    
}

/**
 * Request parameters for listEarningsConfigurations operation in EarningsApi.
 * @export
 * @interface EarningsApiListEarningsConfigurationsRequest
 */
export type EarningsApiListEarningsConfigurationsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly calculationRule?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly taxCategory?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly useDeductionOffset?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly countryCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly includeInShiftDiffrential?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly includeInManualCheck?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly earningCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly includeInAccruals?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly includeInDeferredCompensation?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly includeInDeferredCompensationHours?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EarningsApiListEarningsConfigurations
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for specificConfigurationGet operation in EarningsApi.
 * @export
 * @interface EarningsApiSpecificConfigurationGetRequest
 */
export type EarningsApiSpecificConfigurationGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly earningCode: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly calculationRule?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly taxCategory?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly useDeductionOffset?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly countryCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly includeInShiftDiffrential?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly includeInManualCheck?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly earningCode2?: string
    
    /**
    * 
    * @type {string}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly includeInAccruals?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly includeInDeferredCompensation?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly includeInDeferredCompensationHours?: boolean
    
    /**
    * 
    * @type {number}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EarningsApiSpecificConfigurationGet
    */
    readonly perPage?: number
    
}

/**
 * EarningsApiGenerated - object-oriented interface
 * @export
 * @class EarningsApiGenerated
 * @extends {BaseAPI}
 */
export class EarningsApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add UKG Pro time clock data
     * @param {EarningsApiAddTimeClockDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public addTimeClockData(requestParameters: EarningsApiAddTimeClockDataRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).addTimeClockData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a earning
     * @param {EarningsApiDeleteEarningRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public deleteEarning(requestParameters: EarningsApiDeleteEarningRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).deleteEarning(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all the earning configuration filtered by the parameter(s) passed. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     * @summary Get list of earnings configurations filtered by Parameter including pagination params
     * @param {EarningsApiGetConfigurationsFilteredByParameterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public getConfigurationsFilteredByParameter(requestParameters: EarningsApiGetConfigurationsFilteredByParameterRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).getConfigurationsFilteredByParameter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status details for specified earning
     * @param {EarningsApiGetStatusDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public getStatusDetails(requestParameters: EarningsApiGetStatusDetailsRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).getStatusDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of all earnings configuration setup at company level. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     * @summary Get a list of all earnings configurations
     * @param {EarningsApiListEarningsConfigurationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public listEarningsConfigurations(requestParameters: EarningsApiListEarningsConfigurationsRequest = {}, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).listEarningsConfigurations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details of the earning configuration requested. </br>If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     * @summary Get a specific earning configuration
     * @param {EarningsApiSpecificConfigurationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EarningsApiGenerated
     */
    public specificConfigurationGet(requestParameters: EarningsApiSpecificConfigurationGetRequest, options?: AxiosRequestConfig) {
        return EarningsApiFp(this.configuration).specificConfigurationGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
