/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmpCompensationDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompensationDetailsApi - axios parameter creator
 * @export
 */
export const CompensationDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all compensation details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by company
         * @param {string} companyId 
         * @param {string} [companyId2] 
         * @param {string} [employeeId] 
         * @param {string} [primaryJobCode] 
         * @param {string} [jobGroupCode] 
         * @param {string} [jobTitle] 
         * @param {string} [payGroupCode] 
         * @param {string} [fullTimeOrPartTimeCode] 
         * @param {string} [salaryOrHourlyCode] 
         * @param {string} [primaryShiftCode] 
         * @param {string} [primaryShiftGroupCode] 
         * @param {string} [dateInJob] Used to find date in job less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateLastPaid] Used to find date last paid less than, greater than, equal to, or between passed date(s)
         * @param {string} [datePaidThru] Used to find date paid through less than, greater than, equal to, or between passed date(s)
         * @param {string} [isAutoAllocated] 
         * @param {string} [isAutoPaid] 
         * @param {string} [isSeasonalWorker] 
         * @param {string} [isHighlyCompensated] 
         * @param {string} [isMultipleJob] 
         * @param {string} [performanceReviewRating] 
         * @param {string} [performanceReviewType] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByCompany: async (companyId: string, companyId2?: string, employeeId?: string, primaryJobCode?: string, jobGroupCode?: string, jobTitle?: string, payGroupCode?: string, fullTimeOrPartTimeCode?: string, salaryOrHourlyCode?: string, primaryShiftCode?: string, primaryShiftGroupCode?: string, dateInJob?: string, dateLastPaid?: string, datePaidThru?: string, isAutoAllocated?: string, isAutoPaid?: string, isSeasonalWorker?: string, isHighlyCompensated?: string, isMultipleJob?: string, performanceReviewRating?: string, performanceReviewType?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getAllByCompany', 'companyId', companyId)
            const localVarPath = `/personnel/v1/companies/{companyId}/compensation-details`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId2 !== undefined) {
                localVarQueryParameter['companyId'] = companyId2;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (primaryJobCode !== undefined) {
                localVarQueryParameter['primaryJobCode'] = primaryJobCode;
            }

            if (jobGroupCode !== undefined) {
                localVarQueryParameter['jobGroupCode'] = jobGroupCode;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }

            if (payGroupCode !== undefined) {
                localVarQueryParameter['payGroupCode'] = payGroupCode;
            }

            if (fullTimeOrPartTimeCode !== undefined) {
                localVarQueryParameter['fullTimeOrPartTimeCode'] = fullTimeOrPartTimeCode;
            }

            if (salaryOrHourlyCode !== undefined) {
                localVarQueryParameter['salaryOrHourlyCode'] = salaryOrHourlyCode;
            }

            if (primaryShiftCode !== undefined) {
                localVarQueryParameter['primaryShiftCode'] = primaryShiftCode;
            }

            if (primaryShiftGroupCode !== undefined) {
                localVarQueryParameter['primaryShiftGroupCode'] = primaryShiftGroupCode;
            }

            if (dateInJob !== undefined) {
                localVarQueryParameter['dateInJob'] = dateInJob;
            }

            if (dateLastPaid !== undefined) {
                localVarQueryParameter['dateLastPaid'] = dateLastPaid;
            }

            if (datePaidThru !== undefined) {
                localVarQueryParameter['datePaidThru'] = datePaidThru;
            }

            if (isAutoAllocated !== undefined) {
                localVarQueryParameter['isAutoAllocated'] = isAutoAllocated;
            }

            if (isAutoPaid !== undefined) {
                localVarQueryParameter['isAutoPaid'] = isAutoPaid;
            }

            if (isSeasonalWorker !== undefined) {
                localVarQueryParameter['isSeasonalWorker'] = isSeasonalWorker;
            }

            if (isHighlyCompensated !== undefined) {
                localVarQueryParameter['isHighlyCompensated'] = isHighlyCompensated;
            }

            if (isMultipleJob !== undefined) {
                localVarQueryParameter['isMultipleJob'] = isMultipleJob;
            }

            if (performanceReviewRating !== undefined) {
                localVarQueryParameter['performanceReviewRating'] = performanceReviewRating;
            }

            if (performanceReviewType !== undefined) {
                localVarQueryParameter['performanceReviewType'] = performanceReviewType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/companies/{companyId}/compensation-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all compensation details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details
         * @param {string} [companyId] 
         * @param {string} [employeeId] 
         * @param {string} [primaryJobCode] 
         * @param {string} [jobGroupCode] 
         * @param {string} [jobTitle] 
         * @param {string} [payGroupCode] 
         * @param {string} [fullTimeOrPartTimeCode] 
         * @param {string} [salaryOrHourlyCode] 
         * @param {string} [primaryShiftCode] 
         * @param {string} [primaryShiftGroupCode] 
         * @param {string} [dateInJob] Used to find date in job less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateLastPaid] Used to find date last paid less than, greater than, equal to, or between passed date(s)
         * @param {string} [datePaidThru] Used to find date paid through less than, greater than, equal to, or between passed date(s)
         * @param {string} [isAutoAllocated] 
         * @param {string} [isAutoPaid] 
         * @param {string} [isSeasonalWorker] 
         * @param {string} [isHighlyCompensated] 
         * @param {string} [isMultipleJob] 
         * @param {string} [performanceReviewRating] 
         * @param {string} [performanceReviewType] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDetails: async (companyId?: string, employeeId?: string, primaryJobCode?: string, jobGroupCode?: string, jobTitle?: string, payGroupCode?: string, fullTimeOrPartTimeCode?: string, salaryOrHourlyCode?: string, primaryShiftCode?: string, primaryShiftGroupCode?: string, dateInJob?: string, dateLastPaid?: string, datePaidThru?: string, isAutoAllocated?: string, isAutoPaid?: string, isSeasonalWorker?: string, isHighlyCompensated?: string, isMultipleJob?: string, performanceReviewRating?: string, performanceReviewType?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personnel/v1/compensation-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId !== undefined) {
                localVarQueryParameter['companyId'] = companyId;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (primaryJobCode !== undefined) {
                localVarQueryParameter['primaryJobCode'] = primaryJobCode;
            }

            if (jobGroupCode !== undefined) {
                localVarQueryParameter['jobGroupCode'] = jobGroupCode;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }

            if (payGroupCode !== undefined) {
                localVarQueryParameter['payGroupCode'] = payGroupCode;
            }

            if (fullTimeOrPartTimeCode !== undefined) {
                localVarQueryParameter['fullTimeOrPartTimeCode'] = fullTimeOrPartTimeCode;
            }

            if (salaryOrHourlyCode !== undefined) {
                localVarQueryParameter['salaryOrHourlyCode'] = salaryOrHourlyCode;
            }

            if (primaryShiftCode !== undefined) {
                localVarQueryParameter['primaryShiftCode'] = primaryShiftCode;
            }

            if (primaryShiftGroupCode !== undefined) {
                localVarQueryParameter['primaryShiftGroupCode'] = primaryShiftGroupCode;
            }

            if (dateInJob !== undefined) {
                localVarQueryParameter['dateInJob'] = dateInJob;
            }

            if (dateLastPaid !== undefined) {
                localVarQueryParameter['dateLastPaid'] = dateLastPaid;
            }

            if (datePaidThru !== undefined) {
                localVarQueryParameter['datePaidThru'] = datePaidThru;
            }

            if (isAutoAllocated !== undefined) {
                localVarQueryParameter['isAutoAllocated'] = isAutoAllocated;
            }

            if (isAutoPaid !== undefined) {
                localVarQueryParameter['isAutoPaid'] = isAutoPaid;
            }

            if (isSeasonalWorker !== undefined) {
                localVarQueryParameter['isSeasonalWorker'] = isSeasonalWorker;
            }

            if (isHighlyCompensated !== undefined) {
                localVarQueryParameter['isHighlyCompensated'] = isHighlyCompensated;
            }

            if (isMultipleJob !== undefined) {
                localVarQueryParameter['isMultipleJob'] = isMultipleJob;
            }

            if (performanceReviewRating !== undefined) {
                localVarQueryParameter['performanceReviewRating'] = performanceReviewRating;
            }

            if (performanceReviewType !== undefined) {
                localVarQueryParameter['performanceReviewType'] = performanceReviewType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/compensation-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all compensation details by company and employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by company and employee
         * @param {string} companyId 
         * @param {string} employeeId 
         * @param {string} [companyId2] 
         * @param {string} [employeeId2] 
         * @param {string} [primaryJobCode] 
         * @param {string} [jobGroupCode] 
         * @param {string} [jobTitle] 
         * @param {string} [payGroupCode] 
         * @param {string} [fullTimeOrPartTimeCode] 
         * @param {string} [salaryOrHourlyCode] 
         * @param {string} [primaryShiftCode] 
         * @param {string} [primaryShiftGroupCode] 
         * @param {string} [dateInJob] Used to find date in job less than, greater than, equal to, or between passed date(s)
         * @param {string} [dateLastPaid] Used to find date last paid less than, greater than, equal to, or between passed date(s)
         * @param {string} [datePaidThru] Used to find date paid through less than, greater than, equal to, or between passed date(s)
         * @param {string} [isAutoAllocated] 
         * @param {string} [isAutoPaid] 
         * @param {string} [isSeasonalWorker] 
         * @param {string} [isHighlyCompensated] 
         * @param {string} [isMultipleJob] 
         * @param {string} [performanceReviewRating] 
         * @param {string} [performanceReviewType] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCompanyAndEmployee: async (companyId: string, employeeId: string, companyId2?: string, employeeId2?: string, primaryJobCode?: string, jobGroupCode?: string, jobTitle?: string, payGroupCode?: string, fullTimeOrPartTimeCode?: string, salaryOrHourlyCode?: string, primaryShiftCode?: string, primaryShiftGroupCode?: string, dateInJob?: string, dateLastPaid?: string, datePaidThru?: string, isAutoAllocated?: string, isAutoPaid?: string, isSeasonalWorker?: string, isHighlyCompensated?: string, isMultipleJob?: string, performanceReviewRating?: string, performanceReviewType?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('getByCompanyAndEmployee', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByCompanyAndEmployee', 'employeeId', employeeId)
            const localVarPath = `/personnel/v1/companies/{companyId}/employees/{employeeId}/compensation-details`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyId2 !== undefined) {
                localVarQueryParameter['companyId'] = companyId2;
            }

            if (employeeId2 !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId2;
            }

            if (primaryJobCode !== undefined) {
                localVarQueryParameter['primaryJobCode'] = primaryJobCode;
            }

            if (jobGroupCode !== undefined) {
                localVarQueryParameter['jobGroupCode'] = jobGroupCode;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }

            if (payGroupCode !== undefined) {
                localVarQueryParameter['payGroupCode'] = payGroupCode;
            }

            if (fullTimeOrPartTimeCode !== undefined) {
                localVarQueryParameter['fullTimeOrPartTimeCode'] = fullTimeOrPartTimeCode;
            }

            if (salaryOrHourlyCode !== undefined) {
                localVarQueryParameter['salaryOrHourlyCode'] = salaryOrHourlyCode;
            }

            if (primaryShiftCode !== undefined) {
                localVarQueryParameter['primaryShiftCode'] = primaryShiftCode;
            }

            if (primaryShiftGroupCode !== undefined) {
                localVarQueryParameter['primaryShiftGroupCode'] = primaryShiftGroupCode;
            }

            if (dateInJob !== undefined) {
                localVarQueryParameter['dateInJob'] = dateInJob;
            }

            if (dateLastPaid !== undefined) {
                localVarQueryParameter['dateLastPaid'] = dateLastPaid;
            }

            if (datePaidThru !== undefined) {
                localVarQueryParameter['datePaidThru'] = datePaidThru;
            }

            if (isAutoAllocated !== undefined) {
                localVarQueryParameter['isAutoAllocated'] = isAutoAllocated;
            }

            if (isAutoPaid !== undefined) {
                localVarQueryParameter['isAutoPaid'] = isAutoPaid;
            }

            if (isSeasonalWorker !== undefined) {
                localVarQueryParameter['isSeasonalWorker'] = isSeasonalWorker;
            }

            if (isHighlyCompensated !== undefined) {
                localVarQueryParameter['isHighlyCompensated'] = isHighlyCompensated;
            }

            if (isMultipleJob !== undefined) {
                localVarQueryParameter['isMultipleJob'] = isMultipleJob;
            }

            if (performanceReviewRating !== undefined) {
                localVarQueryParameter['performanceReviewRating'] = performanceReviewRating;
            }

            if (performanceReviewType !== undefined) {
                localVarQueryParameter['performanceReviewType'] = performanceReviewType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/companies/{companyId}/employees/{employeeId}/compensation-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all compensation details by employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by employee
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployee: async (employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getByEmployee', 'employeeId', employeeId)
            const localVarPath = `/personnel/v1/compensation-details/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/compensation-details/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompensationDetailsApi - functional programming interface
 * @export
 */
export const CompensationDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompensationDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all compensation details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by company
         * @param {CompensationDetailsApiGetAllByCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllByCompany(requestParameters: CompensationDetailsApiGetAllByCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpCompensationDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllByCompany(requestParameters.companyId, requestParameters.companyId2, requestParameters.employeeId, requestParameters.primaryJobCode, requestParameters.jobGroupCode, requestParameters.jobTitle, requestParameters.payGroupCode, requestParameters.fullTimeOrPartTimeCode, requestParameters.salaryOrHourlyCode, requestParameters.primaryShiftCode, requestParameters.primaryShiftGroupCode, requestParameters.dateInJob, requestParameters.dateLastPaid, requestParameters.datePaidThru, requestParameters.isAutoAllocated, requestParameters.isAutoPaid, requestParameters.isSeasonalWorker, requestParameters.isHighlyCompensated, requestParameters.isMultipleJob, requestParameters.performanceReviewRating, requestParameters.performanceReviewType, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all compensation details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details
         * @param {CompensationDetailsApiGetAllDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDetails(requestParameters: CompensationDetailsApiGetAllDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpCompensationDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDetails(requestParameters.companyId, requestParameters.employeeId, requestParameters.primaryJobCode, requestParameters.jobGroupCode, requestParameters.jobTitle, requestParameters.payGroupCode, requestParameters.fullTimeOrPartTimeCode, requestParameters.salaryOrHourlyCode, requestParameters.primaryShiftCode, requestParameters.primaryShiftGroupCode, requestParameters.dateInJob, requestParameters.dateLastPaid, requestParameters.datePaidThru, requestParameters.isAutoAllocated, requestParameters.isAutoPaid, requestParameters.isSeasonalWorker, requestParameters.isHighlyCompensated, requestParameters.isMultipleJob, requestParameters.performanceReviewRating, requestParameters.performanceReviewType, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all compensation details by company and employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by company and employee
         * @param {CompensationDetailsApiGetByCompanyAndEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByCompanyAndEmployee(requestParameters: CompensationDetailsApiGetByCompanyAndEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmpCompensationDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByCompanyAndEmployee(requestParameters.companyId, requestParameters.employeeId, requestParameters.companyId2, requestParameters.employeeId2, requestParameters.primaryJobCode, requestParameters.jobGroupCode, requestParameters.jobTitle, requestParameters.payGroupCode, requestParameters.fullTimeOrPartTimeCode, requestParameters.salaryOrHourlyCode, requestParameters.primaryShiftCode, requestParameters.primaryShiftGroupCode, requestParameters.dateInJob, requestParameters.dateLastPaid, requestParameters.datePaidThru, requestParameters.isAutoAllocated, requestParameters.isAutoPaid, requestParameters.isSeasonalWorker, requestParameters.isHighlyCompensated, requestParameters.isMultipleJob, requestParameters.performanceReviewRating, requestParameters.performanceReviewType, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all compensation details by employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by employee
         * @param {CompensationDetailsApiGetByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByEmployee(requestParameters: CompensationDetailsApiGetByEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmpCompensationDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByEmployee(requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompensationDetailsApi - factory interface
 * @export
 */
export const CompensationDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompensationDetailsApiFp(configuration)
    return {
        /**
         * Get all compensation details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by company
         * @param {CompensationDetailsApiGetAllByCompanyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllByCompany(requestParameters: CompensationDetailsApiGetAllByCompanyRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmpCompensationDetails>> {
            return localVarFp.getAllByCompany(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all compensation details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details
         * @param {CompensationDetailsApiGetAllDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDetails(requestParameters: CompensationDetailsApiGetAllDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EmpCompensationDetails>> {
            return localVarFp.getAllDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all compensation details by company and employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by company and employee
         * @param {CompensationDetailsApiGetByCompanyAndEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByCompanyAndEmployee(requestParameters: CompensationDetailsApiGetByCompanyAndEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmpCompensationDetails>> {
            return localVarFp.getByCompanyAndEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all compensation details by employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
         * @summary Get all compensation details by employee
         * @param {CompensationDetailsApiGetByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByEmployee(requestParameters: CompensationDetailsApiGetByEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<EmpCompensationDetails> {
            return localVarFp.getByEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllByCompany operation in CompensationDetailsApi.
 * @export
 * @interface CompensationDetailsApiGetAllByCompanyRequest
 */
export type CompensationDetailsApiGetAllByCompanyRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly companyId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly primaryJobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly jobGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly jobTitle?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly payGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly fullTimeOrPartTimeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly salaryOrHourlyCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly primaryShiftCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly primaryShiftGroupCode?: string
    
    /**
    * Used to find date in job less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly dateInJob?: string
    
    /**
    * Used to find date last paid less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly dateLastPaid?: string
    
    /**
    * Used to find date paid through less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly datePaidThru?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly isAutoAllocated?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly isAutoPaid?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly isSeasonalWorker?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly isHighlyCompensated?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly isMultipleJob?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly performanceReviewRating?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly performanceReviewType?: string
    
    /**
    * 
    * @type {number}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof CompensationDetailsApiGetAllByCompany
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getAllDetails operation in CompensationDetailsApi.
 * @export
 * @interface CompensationDetailsApiGetAllDetailsRequest
 */
export type CompensationDetailsApiGetAllDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly companyId?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly primaryJobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly jobGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly jobTitle?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly payGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly fullTimeOrPartTimeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly salaryOrHourlyCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly primaryShiftCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly primaryShiftGroupCode?: string
    
    /**
    * Used to find date in job less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly dateInJob?: string
    
    /**
    * Used to find date last paid less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly dateLastPaid?: string
    
    /**
    * Used to find date paid through less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly datePaidThru?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly isAutoAllocated?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly isAutoPaid?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly isSeasonalWorker?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly isHighlyCompensated?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly isMultipleJob?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly performanceReviewRating?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly performanceReviewType?: string
    
    /**
    * 
    * @type {number}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof CompensationDetailsApiGetAllDetails
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getByCompanyAndEmployee operation in CompensationDetailsApi.
 * @export
 * @interface CompensationDetailsApiGetByCompanyAndEmployeeRequest
 */
export type CompensationDetailsApiGetByCompanyAndEmployeeRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly companyId: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly employeeId: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly companyId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly employeeId2?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly primaryJobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly jobGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly jobTitle?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly payGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly fullTimeOrPartTimeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly salaryOrHourlyCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly primaryShiftCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly primaryShiftGroupCode?: string
    
    /**
    * Used to find date in job less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly dateInJob?: string
    
    /**
    * Used to find date last paid less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly dateLastPaid?: string
    
    /**
    * Used to find date paid through less than, greater than, equal to, or between passed date(s)
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly datePaidThru?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly isAutoAllocated?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly isAutoPaid?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly isSeasonalWorker?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly isHighlyCompensated?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly isMultipleJob?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly performanceReviewRating?: string
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly performanceReviewType?: string
    
    /**
    * 
    * @type {number}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof CompensationDetailsApiGetByCompanyAndEmployee
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getByEmployee operation in CompensationDetailsApi.
 * @export
 * @interface CompensationDetailsApiGetByEmployeeRequest
 */
export type CompensationDetailsApiGetByEmployeeRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CompensationDetailsApiGetByEmployee
    */
    readonly employeeId: string
    
}

/**
 * CompensationDetailsApiGenerated - object-oriented interface
 * @export
 * @class CompensationDetailsApiGenerated
 * @extends {BaseAPI}
 */
export class CompensationDetailsApiGenerated extends BaseAPI {
    /**
     * Get all compensation details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get all compensation details by company
     * @param {CompensationDetailsApiGetAllByCompanyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationDetailsApiGenerated
     */
    public getAllByCompany(requestParameters: CompensationDetailsApiGetAllByCompanyRequest, options?: AxiosRequestConfig) {
        return CompensationDetailsApiFp(this.configuration).getAllByCompany(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all compensation details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get all compensation details
     * @param {CompensationDetailsApiGetAllDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationDetailsApiGenerated
     */
    public getAllDetails(requestParameters: CompensationDetailsApiGetAllDetailsRequest = {}, options?: AxiosRequestConfig) {
        return CompensationDetailsApiFp(this.configuration).getAllDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all compensation details by company and employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get all compensation details by company and employee
     * @param {CompensationDetailsApiGetByCompanyAndEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationDetailsApiGenerated
     */
    public getByCompanyAndEmployee(requestParameters: CompensationDetailsApiGetByCompanyAndEmployeeRequest, options?: AxiosRequestConfig) {
        return CompensationDetailsApiFp(this.configuration).getByCompanyAndEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all compensation details by employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \"View\" role for the \"Employee Compensation Details\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  <ul>  <li>less than (=<)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=<01-01-1900</li>    </ul>    </li> <li>greater than (=>)    <ul>    <li>Example: /compensation-details/{employeeId}?dateInJob=>01-01-1900</li>   </ul>    </li> <li>equal to (=)    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob=01-01-1900</li>    </ul>   </li> <li>between (={minimum date,maximum date})    <ul>   <li>Example: /compensation-details/{employeeId}?dateInJob={01-01-1900,01-01-1901}</li>    </ul>    </li> </ul> 
     * @summary Get all compensation details by employee
     * @param {CompensationDetailsApiGetByEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompensationDetailsApiGenerated
     */
    public getByEmployee(requestParameters: CompensationDetailsApiGetByEmployeeRequest, options?: AxiosRequestConfig) {
        return CompensationDetailsApiFp(this.configuration).getByEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
