/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PtoPlans } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GetSpecificEmployeesPtoPlansApi - axios parameter creator
 * @export
 */
export const GetSpecificEmployeesPtoPlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns information about an UltiPro employees PTO Plans. Permissions - Ultipro service account must have \"View\" role for the \"PTO Plan Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get a specific employees pto-plans
         * @param {string} companyId Company Identifier
         * @param {string} employeeId Employee Identifier
         * @param {number} [page] Pagination, which page you want to see
         * @param {number} [perPage] Pagination, how many records per page you want to see
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info: async (companyId: string, employeeId: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyId' is not null or undefined
            assertParamExists('info', 'companyId', companyId)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('info', 'employeeId', employeeId)
            const localVarPath = `/personnel/v1/companies/{companyId}/employees/{employeeId}/pto-plans`
                .replace(`{${"companyId"}}`, encodeURIComponent(String(companyId !== undefined ? companyId : `-companyId-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/companies/{companyId}/employees/{employeeId}/pto-plans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetSpecificEmployeesPtoPlansApi - functional programming interface
 * @export
 */
export const GetSpecificEmployeesPtoPlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetSpecificEmployeesPtoPlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns information about an UltiPro employees PTO Plans. Permissions - Ultipro service account must have \"View\" role for the \"PTO Plan Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get a specific employees pto-plans
         * @param {GetSpecificEmployeesPtoPlansApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async info(requestParameters: GetSpecificEmployeesPtoPlansApiInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PtoPlans>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.info(requestParameters.companyId, requestParameters.employeeId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetSpecificEmployeesPtoPlansApi - factory interface
 * @export
 */
export const GetSpecificEmployeesPtoPlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetSpecificEmployeesPtoPlansApiFp(configuration)
    return {
        /**
         * Returns information about an UltiPro employees PTO Plans. Permissions - Ultipro service account must have \"View\" role for the \"PTO Plan Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get a specific employees pto-plans
         * @param {GetSpecificEmployeesPtoPlansApiInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        info(requestParameters: GetSpecificEmployeesPtoPlansApiInfoRequest, options?: AxiosRequestConfig): AxiosPromise<Array<PtoPlans>> {
            return localVarFp.info(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for info operation in GetSpecificEmployeesPtoPlansApi.
 * @export
 * @interface GetSpecificEmployeesPtoPlansApiInfoRequest
 */
export type GetSpecificEmployeesPtoPlansApiInfoRequest = {
    
    /**
    * Company Identifier
    * @type {string}
    * @memberof GetSpecificEmployeesPtoPlansApiInfo
    */
    readonly companyId: string
    
    /**
    * Employee Identifier
    * @type {string}
    * @memberof GetSpecificEmployeesPtoPlansApiInfo
    */
    readonly employeeId: string
    
    /**
    * Pagination, which page you want to see
    * @type {number}
    * @memberof GetSpecificEmployeesPtoPlansApiInfo
    */
    readonly page?: number
    
    /**
    * Pagination, how many records per page you want to see
    * @type {number}
    * @memberof GetSpecificEmployeesPtoPlansApiInfo
    */
    readonly perPage?: number
    
}

/**
 * GetSpecificEmployeesPtoPlansApiGenerated - object-oriented interface
 * @export
 * @class GetSpecificEmployeesPtoPlansApiGenerated
 * @extends {BaseAPI}
 */
export class GetSpecificEmployeesPtoPlansApiGenerated extends BaseAPI {
    /**
     * Returns information about an UltiPro employees PTO Plans. Permissions - Ultipro service account must have \"View\" role for the \"PTO Plan Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @summary Get a specific employees pto-plans
     * @param {GetSpecificEmployeesPtoPlansApiInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetSpecificEmployeesPtoPlansApiGenerated
     */
    public info(requestParameters: GetSpecificEmployeesPtoPlansApiInfoRequest, options?: AxiosRequestConfig) {
        return GetSpecificEmployeesPtoPlansApiFp(this.configuration).info(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
