/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeEmploymentDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeEmploymentDetailsApi - axios parameter creator
 * @export
 */
export const EmployeeEmploymentDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}) <ul> <li>Company ID parameter can take in multiple deduction codes separated by coma. ex: [ABC, DEF]</li> <li>Primary Job Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Work Location Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Project Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Deduction Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Earning Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Type Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Status Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Pay Group parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> </ul> 
         * @summary Get Employee Employment Details
         * @param {string} [companyID] 
         * @param {string} [employeeID] 
         * @param {string} [primaryJobCode] 
         * @param {string} [jobTitle] 
         * @param {string} [fullTimeOrPartTimeCode] 
         * @param {string} [primaryWorkLocationCode] 
         * @param {string} [primaryProjectCode] 
         * @param {string} [deductionGroupCode] 
         * @param {string} [earningGroupCode] 
         * @param {string} [employeeTypeCode] 
         * @param {string} [employeeStatusCode] 
         * @param {string} [employeeNumber] 
         * @param {string} [supervisorId] 
         * @param {string} [originalHireDate] 
         * @param {string} [lastHireDate] 
         * @param {string} [dateOfTermination] 
         * @param {string} [dateOfRetirement] 
         * @param {string} [dateTimeCreated] 
         * @param {string} [dateTimeChanged] 
         * @param {string} [dateLastPayDatePaid] 
         * @param {string} [payGroup] 
         * @param {string} [isHomeCompany] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyID?: string, employeeID?: string, primaryJobCode?: string, jobTitle?: string, fullTimeOrPartTimeCode?: string, primaryWorkLocationCode?: string, primaryProjectCode?: string, deductionGroupCode?: string, earningGroupCode?: string, employeeTypeCode?: string, employeeStatusCode?: string, employeeNumber?: string, supervisorId?: string, originalHireDate?: string, lastHireDate?: string, dateOfTermination?: string, dateOfRetirement?: string, dateTimeCreated?: string, dateTimeChanged?: string, dateLastPayDatePaid?: string, payGroup?: string, isHomeCompany?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personnel/v1/employee-employment-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (companyID !== undefined) {
                localVarQueryParameter['companyID'] = companyID;
            }

            if (employeeID !== undefined) {
                localVarQueryParameter['employeeID'] = employeeID;
            }

            if (primaryJobCode !== undefined) {
                localVarQueryParameter['primaryJobCode'] = primaryJobCode;
            }

            if (jobTitle !== undefined) {
                localVarQueryParameter['jobTitle'] = jobTitle;
            }

            if (fullTimeOrPartTimeCode !== undefined) {
                localVarQueryParameter['fullTimeOrPartTimeCode'] = fullTimeOrPartTimeCode;
            }

            if (primaryWorkLocationCode !== undefined) {
                localVarQueryParameter['primaryWorkLocationCode'] = primaryWorkLocationCode;
            }

            if (primaryProjectCode !== undefined) {
                localVarQueryParameter['primaryProjectCode'] = primaryProjectCode;
            }

            if (deductionGroupCode !== undefined) {
                localVarQueryParameter['deductionGroupCode'] = deductionGroupCode;
            }

            if (earningGroupCode !== undefined) {
                localVarQueryParameter['earningGroupCode'] = earningGroupCode;
            }

            if (employeeTypeCode !== undefined) {
                localVarQueryParameter['employeeTypeCode'] = employeeTypeCode;
            }

            if (employeeStatusCode !== undefined) {
                localVarQueryParameter['employeeStatusCode'] = employeeStatusCode;
            }

            if (employeeNumber !== undefined) {
                localVarQueryParameter['employeeNumber'] = employeeNumber;
            }

            if (supervisorId !== undefined) {
                localVarQueryParameter['supervisorId'] = supervisorId;
            }

            if (originalHireDate !== undefined) {
                localVarQueryParameter['originalHireDate'] = (originalHireDate as any instanceof Date) ?
                    (originalHireDate as any).toISOString() :
                    originalHireDate;
            }

            if (lastHireDate !== undefined) {
                localVarQueryParameter['lastHireDate'] = (lastHireDate as any instanceof Date) ?
                    (lastHireDate as any).toISOString() :
                    lastHireDate;
            }

            if (dateOfTermination !== undefined) {
                localVarQueryParameter['dateOfTermination'] = (dateOfTermination as any instanceof Date) ?
                    (dateOfTermination as any).toISOString() :
                    dateOfTermination;
            }

            if (dateOfRetirement !== undefined) {
                localVarQueryParameter['dateOfRetirement'] = (dateOfRetirement as any instanceof Date) ?
                    (dateOfRetirement as any).toISOString() :
                    dateOfRetirement;
            }

            if (dateTimeCreated !== undefined) {
                localVarQueryParameter['dateTimeCreated'] = (dateTimeCreated as any instanceof Date) ?
                    (dateTimeCreated as any).toISOString() :
                    dateTimeCreated;
            }

            if (dateTimeChanged !== undefined) {
                localVarQueryParameter['dateTimeChanged'] = (dateTimeChanged as any instanceof Date) ?
                    (dateTimeChanged as any).toISOString() :
                    dateTimeChanged;
            }

            if (dateLastPayDatePaid !== undefined) {
                localVarQueryParameter['dateLastPayDatePaid'] = (dateLastPayDatePaid as any instanceof Date) ?
                    (dateLastPayDatePaid as any).toISOString() :
                    dateLastPayDatePaid;
            }

            if (payGroup !== undefined) {
                localVarQueryParameter['payGroup'] = payGroup;
            }

            if (isHomeCompany !== undefined) {
                localVarQueryParameter['isHomeCompany'] = isHomeCompany;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/employee-employment-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeEmploymentDetailsApi - functional programming interface
 * @export
 */
export const EmployeeEmploymentDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeEmploymentDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}) <ul> <li>Company ID parameter can take in multiple deduction codes separated by coma. ex: [ABC, DEF]</li> <li>Primary Job Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Work Location Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Project Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Deduction Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Earning Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Type Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Status Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Pay Group parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> </ul> 
         * @summary Get Employee Employment Details
         * @param {EmployeeEmploymentDetailsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: EmployeeEmploymentDetailsApiGetDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeEmploymentDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyID, requestParameters.employeeID, requestParameters.primaryJobCode, requestParameters.jobTitle, requestParameters.fullTimeOrPartTimeCode, requestParameters.primaryWorkLocationCode, requestParameters.primaryProjectCode, requestParameters.deductionGroupCode, requestParameters.earningGroupCode, requestParameters.employeeTypeCode, requestParameters.employeeStatusCode, requestParameters.employeeNumber, requestParameters.supervisorId, requestParameters.originalHireDate, requestParameters.lastHireDate, requestParameters.dateOfTermination, requestParameters.dateOfRetirement, requestParameters.dateTimeCreated, requestParameters.dateTimeChanged, requestParameters.dateLastPayDatePaid, requestParameters.payGroup, requestParameters.isHomeCompany, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeEmploymentDetailsApi - factory interface
 * @export
 */
export const EmployeeEmploymentDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeEmploymentDetailsApiFp(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}) <ul> <li>Company ID parameter can take in multiple deduction codes separated by coma. ex: [ABC, DEF]</li> <li>Primary Job Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Work Location Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Project Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Deduction Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Earning Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Type Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Status Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Pay Group parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> </ul> 
         * @summary Get Employee Employment Details
         * @param {EmployeeEmploymentDetailsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: EmployeeEmploymentDetailsApiGetDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeEmploymentDetails>> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDetails operation in EmployeeEmploymentDetailsApi.
 * @export
 * @interface EmployeeEmploymentDetailsApiGetDetailsRequest
 */
export type EmployeeEmploymentDetailsApiGetDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly companyID?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly employeeID?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly primaryJobCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly jobTitle?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly fullTimeOrPartTimeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly primaryWorkLocationCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly primaryProjectCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly deductionGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly earningGroupCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly employeeTypeCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly employeeStatusCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly employeeNumber?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly supervisorId?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly originalHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly lastHireDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly dateOfTermination?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly dateOfRetirement?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly dateTimeCreated?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly dateTimeChanged?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly dateLastPayDatePaid?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly payGroup?: string
    
    /**
    * 
    * @type {string}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly isHomeCompany?: string
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof EmployeeEmploymentDetailsApiGetDetails
    */
    readonly perPage?: number
    
}

/**
 * EmployeeEmploymentDetailsApiGenerated - object-oriented interface
 * @export
 * @class EmployeeEmploymentDetailsApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeEmploymentDetailsApiGenerated extends BaseAPI {
    /**
     * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}) <ul> <li>Company ID parameter can take in multiple deduction codes separated by coma. ex: [ABC, DEF]</li> <li>Primary Job Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Work Location Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Primary Project Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Deduction Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Earning Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Type Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Employee Status Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> <li>Pay Group parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]</li> </ul> 
     * @summary Get Employee Employment Details
     * @param {EmployeeEmploymentDetailsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeEmploymentDetailsApiGenerated
     */
    public getDetails(requestParameters: EmployeeEmploymentDetailsApiGetDetailsRequest = {}, options?: AxiosRequestConfig) {
        return EmployeeEmploymentDetailsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
