/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PostNewTokenRequestObtainOAuthTokenRequest } from '../models';
// @ts-ignore
import { TokenResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PostNewTokenRequestApi - axios parameter creator
 * @export
 */
export const PostNewTokenRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Obtain new token to use in subsequent service requests <b>ONLY</b> for services that use oAuth.
         * @summary Obtain new oAuth token
         * @param {string} tenantName Tenant Name provided to you from UltiPro
         * @param {string} grantType You should enter \\\&quot;client_credentials\\\&quot; for this value
         * @param {string} clientId This is from UltiPro Identity and provided to you
         * @param {string} clientSecret This is from UltiPro Identity and provided to you
         * @param {string} scope you should enter \\\&quot;profile\\\&quot; for this
         * @param {PostNewTokenRequestObtainOAuthTokenRequest} postNewTokenRequestObtainOAuthTokenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainOAuthToken: async (tenantName: string, grantType: string, clientId: string, clientSecret: string, scope: string, postNewTokenRequestObtainOAuthTokenRequest: PostNewTokenRequestObtainOAuthTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tenantName' is not null or undefined
            assertParamExists('obtainOAuthToken', 'tenantName', tenantName)
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('obtainOAuthToken', 'grantType', grantType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('obtainOAuthToken', 'clientId', clientId)
            // verify required parameter 'clientSecret' is not null or undefined
            assertParamExists('obtainOAuthToken', 'clientSecret', clientSecret)
            // verify required parameter 'scope' is not null or undefined
            assertParamExists('obtainOAuthToken', 'scope', scope)
            // verify required parameter 'postNewTokenRequestObtainOAuthTokenRequest' is not null or undefined
            assertParamExists('obtainOAuthToken', 'postNewTokenRequestObtainOAuthTokenRequest', postNewTokenRequestObtainOAuthTokenRequest)
            const localVarPath = `/signin/oauth2/t/{tenant-name}/access_token`
                .replace(`{${"tenant-name"}}`, encodeURIComponent(String(tenantName !== undefined ? tenantName : `-tenant-name-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

            if (grantType !== undefined) {
                await addFormParam('grant_type', grantType, false, true)
            }
    
            if (clientId !== undefined) {
                await addFormParam('client_id', clientId, false, true)
            }
    
            if (clientSecret !== undefined) {
                await addFormParam('client_secret', clientSecret, false, true)
            }
    
            if (scope !== undefined) {
                await addFormParam('scope', scope, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: postNewTokenRequestObtainOAuthTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/signin/oauth2/t/{tenant-name}/access_token',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(postNewTokenRequestObtainOAuthTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostNewTokenRequestApi - functional programming interface
 * @export
 */
export const PostNewTokenRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostNewTokenRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * Obtain new token to use in subsequent service requests <b>ONLY</b> for services that use oAuth.
         * @summary Obtain new oAuth token
         * @param {PostNewTokenRequestApiObtainOAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obtainOAuthToken(requestParameters: PostNewTokenRequestApiObtainOAuthTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>> {
            const postNewTokenRequestObtainOAuthTokenRequest: PostNewTokenRequestObtainOAuthTokenRequest = {
                grant_type: requestParameters.grant_type,
                client_id: requestParameters.client_id,
                client_secret: requestParameters.client_secret,
                scope: requestParameters.scope
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.obtainOAuthToken(requestParameters.tenantName, requestParameters.grantType, requestParameters.clientId, requestParameters.clientSecret, requestParameters.scope, postNewTokenRequestObtainOAuthTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostNewTokenRequestApi - factory interface
 * @export
 */
export const PostNewTokenRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostNewTokenRequestApiFp(configuration)
    return {
        /**
         * Obtain new token to use in subsequent service requests <b>ONLY</b> for services that use oAuth.
         * @summary Obtain new oAuth token
         * @param {PostNewTokenRequestApiObtainOAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainOAuthToken(requestParameters: PostNewTokenRequestApiObtainOAuthTokenRequest, options?: AxiosRequestConfig): AxiosPromise<TokenResponse> {
            return localVarFp.obtainOAuthToken(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for obtainOAuthToken operation in PostNewTokenRequestApi.
 * @export
 * @interface PostNewTokenRequestApiObtainOAuthTokenRequest
 */
export type PostNewTokenRequestApiObtainOAuthTokenRequest = {
    
    /**
    * Tenant Name provided to you from UltiPro
    * @type {string}
    * @memberof PostNewTokenRequestApiObtainOAuthToken
    */
    readonly tenantName: string
    
    /**
    * You should enter \\\"client_credentials\\\" for this value
    * @type {string}
    * @memberof PostNewTokenRequestApiObtainOAuthToken
    */
    readonly grantType: string
    
    /**
    * This is from UltiPro Identity and provided to you
    * @type {string}
    * @memberof PostNewTokenRequestApiObtainOAuthToken
    */
    readonly clientId: string
    
    /**
    * This is from UltiPro Identity and provided to you
    * @type {string}
    * @memberof PostNewTokenRequestApiObtainOAuthToken
    */
    readonly clientSecret: string
    
    /**
    * you should enter \\\"profile\\\" for this
    * @type {string}
    * @memberof PostNewTokenRequestApiObtainOAuthToken
    */
    readonly scope: string
    
} & PostNewTokenRequestObtainOAuthTokenRequest

/**
 * PostNewTokenRequestApiGenerated - object-oriented interface
 * @export
 * @class PostNewTokenRequestApiGenerated
 * @extends {BaseAPI}
 */
export class PostNewTokenRequestApiGenerated extends BaseAPI {
    /**
     * Obtain new token to use in subsequent service requests <b>ONLY</b> for services that use oAuth.
     * @summary Obtain new oAuth token
     * @param {PostNewTokenRequestApiObtainOAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostNewTokenRequestApiGenerated
     */
    public obtainOAuthToken(requestParameters: PostNewTokenRequestApiObtainOAuthTokenRequest, options?: AxiosRequestConfig) {
        return PostNewTokenRequestApiFp(this.configuration).obtainOAuthToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
