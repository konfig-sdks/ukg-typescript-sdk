/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { OrgLevels } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SingleOrganizationLevelApi - axios parameter creator
 * @export
 */
export const SingleOrganizationLevelApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The org-levels endpoint returns information about the UltiPro organizational level configurations. The unique identifier for an org-levels configuration, is level and code properties concatenated, therefore both values are needed. Permissions - Ultipro service account must have \"View\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get single org-level
         * @param {string} level Description of the org-level.
         * @param {string} code Organization code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (level: string, code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'level' is not null or undefined
            assertParamExists('get', 'level', level)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('get', 'code', code)
            const localVarPath = `/configuration/v1/org-levels/{level}/{code}`
                .replace(`{${"level"}}`, encodeURIComponent(String(level !== undefined ? level : `-level-`)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code !== undefined ? code : `-code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/configuration/v1/org-levels/{level}/{code}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows the ability update a single organizational level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Update one org-level
         * @param {string} level Description of the org-level.
         * @param {string} code Organization code.
         * @param {OrgLevels} orgLevels The org-level to be written.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrgLevel: async (level: string, code: string, orgLevels: OrgLevels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'level' is not null or undefined
            assertParamExists('updateOrgLevel', 'level', level)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateOrgLevel', 'code', code)
            // verify required parameter 'orgLevels' is not null or undefined
            assertParamExists('updateOrgLevel', 'orgLevels', orgLevels)
            const localVarPath = `/configuration/v1/org-levels/{level}/{code}`
                .replace(`{${"level"}}`, encodeURIComponent(String(level !== undefined ? level : `-level-`)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code !== undefined ? code : `-code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orgLevels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/configuration/v1/org-levels/{level}/{code}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orgLevels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows the ability update one or more properties of a single org-level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Patch one org-level
         * @param {string} level Description of the org-level.
         * @param {string} code Organization code.
         * @param {OrgLevels} orgLevels The org-level to be written.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProperties: async (level: string, code: string, orgLevels: OrgLevels, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'level' is not null or undefined
            assertParamExists('updateProperties', 'level', level)
            // verify required parameter 'code' is not null or undefined
            assertParamExists('updateProperties', 'code', code)
            // verify required parameter 'orgLevels' is not null or undefined
            assertParamExists('updateProperties', 'orgLevels', orgLevels)
            const localVarPath = `/configuration/v1/org-levels/{level}/{code}`
                .replace(`{${"level"}}`, encodeURIComponent(String(level !== undefined ? level : `-level-`)))
                .replace(`{${"code"}}`, encodeURIComponent(String(code !== undefined ? code : `-code-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orgLevels,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/configuration/v1/org-levels/{level}/{code}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orgLevels, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SingleOrganizationLevelApi - functional programming interface
 * @export
 */
export const SingleOrganizationLevelApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SingleOrganizationLevelApiAxiosParamCreator(configuration)
    return {
        /**
         * The org-levels endpoint returns information about the UltiPro organizational level configurations. The unique identifier for an org-levels configuration, is level and code properties concatenated, therefore both values are needed. Permissions - Ultipro service account must have \"View\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get single org-level
         * @param {SingleOrganizationLevelApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: SingleOrganizationLevelApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgLevels>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.level, requestParameters.code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allows the ability update a single organizational level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Update one org-level
         * @param {SingleOrganizationLevelApiUpdateOrgLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrgLevel(requestParameters: SingleOrganizationLevelApiUpdateOrgLevelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgLevels>> {
            const orgLevels: OrgLevels = {
                description: requestParameters.requestBody.description,
                budgetGroup: requestParameters.requestBody.budgetGroup,
                code: requestParameters.requestBody.code,
                currentYearBudgetFTE: requestParameters.requestBody.currentYearBudgetFTE,
                currentYearBudgetSalary: requestParameters.requestBody.currentYearBudgetSalary,
                glSegment: requestParameters.requestBody.glSegment,
                lastYearBudgetFTE: requestParameters.requestBody.lastYearBudgetFTE,
                lastYearBudgetSalary: requestParameters.requestBody.lastYearBudgetSalary,
                level: requestParameters.requestBody.level,
                levelDescription: requestParameters.requestBody.levelDescription,
                reportingCategory: requestParameters.requestBody.reportingCategory,
                isActive: requestParameters.requestBody.isActive
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrgLevel(requestParameters.level, requestParameters.code, orgLevels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Allows the ability update one or more properties of a single org-level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Patch one org-level
         * @param {SingleOrganizationLevelApiUpdatePropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProperties(requestParameters: SingleOrganizationLevelApiUpdatePropertiesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrgLevels>> {
            const orgLevels: OrgLevels = {
                description: requestParameters.requestBody.description,
                budgetGroup: requestParameters.requestBody.budgetGroup,
                code: requestParameters.requestBody.code,
                currentYearBudgetFTE: requestParameters.requestBody.currentYearBudgetFTE,
                currentYearBudgetSalary: requestParameters.requestBody.currentYearBudgetSalary,
                glSegment: requestParameters.requestBody.glSegment,
                lastYearBudgetFTE: requestParameters.requestBody.lastYearBudgetFTE,
                lastYearBudgetSalary: requestParameters.requestBody.lastYearBudgetSalary,
                level: requestParameters.requestBody.level,
                levelDescription: requestParameters.requestBody.levelDescription,
                reportingCategory: requestParameters.requestBody.reportingCategory,
                isActive: requestParameters.requestBody.isActive
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProperties(requestParameters.level, requestParameters.code, orgLevels, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SingleOrganizationLevelApi - factory interface
 * @export
 */
export const SingleOrganizationLevelApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SingleOrganizationLevelApiFp(configuration)
    return {
        /**
         * The org-levels endpoint returns information about the UltiPro organizational level configurations. The unique identifier for an org-levels configuration, is level and code properties concatenated, therefore both values are needed. Permissions - Ultipro service account must have \"View\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get single org-level
         * @param {SingleOrganizationLevelApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: SingleOrganizationLevelApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<OrgLevels> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows the ability update a single organizational level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Update one org-level
         * @param {SingleOrganizationLevelApiUpdateOrgLevelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrgLevel(requestParameters: SingleOrganizationLevelApiUpdateOrgLevelRequest, options?: AxiosRequestConfig): AxiosPromise<OrgLevels> {
            return localVarFp.updateOrgLevel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows the ability update one or more properties of a single org-level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Patch one org-level
         * @param {SingleOrganizationLevelApiUpdatePropertiesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProperties(requestParameters: SingleOrganizationLevelApiUpdatePropertiesRequest, options?: AxiosRequestConfig): AxiosPromise<OrgLevels> {
            return localVarFp.updateProperties(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in SingleOrganizationLevelApi.
 * @export
 * @interface SingleOrganizationLevelApiGetRequest
 */
export type SingleOrganizationLevelApiGetRequest = {
    
    /**
    * Description of the org-level.
    * @type {string}
    * @memberof SingleOrganizationLevelApiGet
    */
    readonly level: string
    
    /**
    * Organization code.
    * @type {string}
    * @memberof SingleOrganizationLevelApiGet
    */
    readonly code: string
    
}

/**
 * Request parameters for updateOrgLevel operation in SingleOrganizationLevelApi.
 * @export
 * @interface SingleOrganizationLevelApiUpdateOrgLevelRequest
 */
export type SingleOrganizationLevelApiUpdateOrgLevelRequest = {
    /**
    * Description of the org-level.
    * @type {string}
    * @memberof SingleOrganizationLevelApiUpdateOrgLevel
    */
    readonly level: string
    /**
    * Organization code.
    * @type {string}
    * @memberof SingleOrganizationLevelApiUpdateOrgLevel
    */
    readonly code: string
    /**
    * The org-level to be written.
    * @type {OrgLevels}
    * @memberof SingleOrganizationLevelApiUpdateOrgLevel
    */
    readonly requestBody: OrgLevels
}

/**
 * Request parameters for updateProperties operation in SingleOrganizationLevelApi.
 * @export
 * @interface SingleOrganizationLevelApiUpdatePropertiesRequest
 */
export type SingleOrganizationLevelApiUpdatePropertiesRequest = {
    /**
    * Description of the org-level.
    * @type {string}
    * @memberof SingleOrganizationLevelApiUpdateProperties
    */
    readonly level: string
    /**
    * Organization code.
    * @type {string}
    * @memberof SingleOrganizationLevelApiUpdateProperties
    */
    readonly code: string
    /**
    * The org-level to be written.
    * @type {OrgLevels}
    * @memberof SingleOrganizationLevelApiUpdateProperties
    */
    readonly requestBody: OrgLevels
}

/**
 * SingleOrganizationLevelApiGenerated - object-oriented interface
 * @export
 * @class SingleOrganizationLevelApiGenerated
 * @extends {BaseAPI}
 */
export class SingleOrganizationLevelApiGenerated extends BaseAPI {
    /**
     * The org-levels endpoint returns information about the UltiPro organizational level configurations. The unique identifier for an org-levels configuration, is level and code properties concatenated, therefore both values are needed. Permissions - Ultipro service account must have \"View\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @summary Get single org-level
     * @param {SingleOrganizationLevelApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleOrganizationLevelApiGenerated
     */
    public get(requestParameters: SingleOrganizationLevelApiGetRequest, options?: AxiosRequestConfig) {
        return SingleOrganizationLevelApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows the ability update a single organizational level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @summary Update one org-level
     * @param {SingleOrganizationLevelApiUpdateOrgLevelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleOrganizationLevelApiGenerated
     */
    public updateOrgLevel(requestParameters: SingleOrganizationLevelApiUpdateOrgLevelRequest, options?: AxiosRequestConfig) {
        return SingleOrganizationLevelApiFp(this.configuration).updateOrgLevel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows the ability update one or more properties of a single org-level configuration. Permissions - Ultipro service account must have \"Edit\" role for the \"Company Configuration Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @summary Patch one org-level
     * @param {SingleOrganizationLevelApiUpdatePropertiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SingleOrganizationLevelApiGenerated
     */
    public updateProperties(requestParameters: SingleOrganizationLevelApiUpdatePropertiesRequest, options?: AxiosRequestConfig) {
        return SingleOrganizationLevelApiFp(this.configuration).updateProperties(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
