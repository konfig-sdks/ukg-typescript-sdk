/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UserDetails } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * UserDetailsApi - axios parameter creator
 * @export
 */
export const UserDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   
         * @summary Get User Details
         * @param {string} [userName] 
         * @param {string} [userStatus] 
         * @param {string} [employeeId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetails: async (userName?: string, userStatus?: string, employeeId?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personnel/v1/user-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (userName !== undefined) {
                localVarQueryParameter['userName'] = userName;
            }

            if (userStatus !== undefined) {
                localVarQueryParameter['userStatus'] = userStatus;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/user-details',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserDetailsApi - functional programming interface
 * @export
 */
export const UserDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   
         * @summary Get User Details
         * @param {UserDetailsApiGetUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetails(requestParameters: UserDetailsApiGetUserDetailsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDetails>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetails(requestParameters.userName, requestParameters.userStatus, requestParameters.employeeId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserDetailsApi - factory interface
 * @export
 */
export const UserDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserDetailsApiFp(configuration)
    return {
        /**
         * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   
         * @summary Get User Details
         * @param {UserDetailsApiGetUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetails(requestParameters: UserDetailsApiGetUserDetailsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<UserDetails>> {
            return localVarFp.getUserDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserDetails operation in UserDetailsApi.
 * @export
 * @interface UserDetailsApiGetUserDetailsRequest
 */
export type UserDetailsApiGetUserDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof UserDetailsApiGetUserDetails
    */
    readonly userName?: string
    
    /**
    * 
    * @type {string}
    * @memberof UserDetailsApiGetUserDetails
    */
    readonly userStatus?: string
    
    /**
    * 
    * @type {string}
    * @memberof UserDetailsApiGetUserDetails
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {number}
    * @memberof UserDetailsApiGetUserDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof UserDetailsApiGetUserDetails
    */
    readonly perPage?: number
    
}

/**
 * UserDetailsApiGenerated - object-oriented interface
 * @export
 * @class UserDetailsApiGenerated
 * @extends {BaseAPI}
 */
export class UserDetailsApiGenerated extends BaseAPI {
    /**
     * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})   
     * @summary Get User Details
     * @param {UserDetailsApiGetUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDetailsApiGenerated
     */
    public getUserDetails(requestParameters: UserDetailsApiGetUserDetailsRequest = {}, options?: AxiosRequestConfig) {
        return UserDetailsApiFp(this.configuration).getUserDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
