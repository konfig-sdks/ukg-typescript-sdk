/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging } from '../models';
// @ts-ignore
import { UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus } from '../models';
// @ts-ignore
import { UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ImportToolApi - axios parameter creator
 * @export
 */
export const ImportToolApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have View role for the Personnel Integration Web Service. This GET call has a requirement of PersonnelResourceAuthorize(ApiOperation.Read)
         * @summary Retrieves the status of an import tool transaction
         * @param {string} stagingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (stagingId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'stagingId' is not null or undefined
            assertParamExists('getStatus', 'stagingId', stagingId)
            const localVarPath = `/personnel/v1/import-tool/status/{stagingId}`
                .replace(`{${"stagingId"}}`, encodeURIComponent(String(stagingId !== undefined ? stagingId : `-stagingId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/import-tool/status/{stagingId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits an encoded XML transaction to the Import Tool. Transaction results can be viewed on the Administration > Integration Studio > Import Tool > Results page. Reference the Import Tool XML and Configuration Settings Guide for transaction details. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have the View and Add roles for the Personnel Integration Web Service. This POST call has a requirement of PersonnelResourceAuthorize(ApiOperation.Create)
         * @summary Takes an XML transaction and feeds it into the Import Tool
         * @param {UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest} ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post: async (ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest: UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest' is not null or undefined
            assertParamExists('post', 'ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest', ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest)
            const localVarPath = `/personnel/v1/import-tool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/import-tool',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImportToolApi - functional programming interface
 * @export
 */
export const ImportToolApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImportToolApiAxiosParamCreator(configuration)
    return {
        /**
         * Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have View role for the Personnel Integration Web Service. This GET call has a requirement of PersonnelResourceAuthorize(ApiOperation.Read)
         * @summary Retrieves the status of an import tool transaction
         * @param {ImportToolApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(requestParameters: ImportToolApiGetStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(requestParameters.stagingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits an encoded XML transaction to the Import Tool. Transaction results can be viewed on the Administration > Integration Studio > Import Tool > Results page. Reference the Import Tool XML and Configuration Settings Guide for transaction details. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have the View and Add roles for the Personnel Integration Web Service. This POST call has a requirement of PersonnelResourceAuthorize(ApiOperation.Create)
         * @summary Takes an XML transaction and feeds it into the Import Tool
         * @param {ImportToolApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async post(requestParameters: ImportToolApiPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>>> {
            const ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest: UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest = {
                transaction: requestParameters.transaction,
                uniqueFileName: requestParameters.uniqueFileName
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.post(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImportToolApi - factory interface
 * @export
 */
export const ImportToolApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImportToolApiFp(configuration)
    return {
        /**
         * Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have View role for the Personnel Integration Web Service. This GET call has a requirement of PersonnelResourceAuthorize(ApiOperation.Read)
         * @summary Retrieves the status of an import tool transaction
         * @param {ImportToolApiGetStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(requestParameters: ImportToolApiGetStatusRequest, options?: AxiosRequestConfig): AxiosPromise<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus> {
            return localVarFp.getStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits an encoded XML transaction to the Import Tool. Transaction results can be viewed on the Administration > Integration Studio > Import Tool > Results page. Reference the Import Tool XML and Configuration Settings Guide for transaction details. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have the View and Add roles for the Personnel Integration Web Service. This POST call has a requirement of PersonnelResourceAuthorize(ApiOperation.Create)
         * @summary Takes an XML transaction and feeds it into the Import Tool
         * @param {ImportToolApiPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        post(requestParameters: ImportToolApiPostRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>> {
            return localVarFp.post(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getStatus operation in ImportToolApi.
 * @export
 * @interface ImportToolApiGetStatusRequest
 */
export type ImportToolApiGetStatusRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ImportToolApiGetStatus
    */
    readonly stagingId: string
    
}

/**
 * Request parameters for post operation in ImportToolApi.
 * @export
 * @interface ImportToolApiPostRequest
 */
export type ImportToolApiPostRequest = {
    
} & UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest

/**
 * ImportToolApiGenerated - object-oriented interface
 * @export
 * @class ImportToolApiGenerated
 * @extends {BaseAPI}
 */
export class ImportToolApiGenerated extends BaseAPI {
    /**
     * Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have View role for the Personnel Integration Web Service. This GET call has a requirement of PersonnelResourceAuthorize(ApiOperation.Read)
     * @summary Retrieves the status of an import tool transaction
     * @param {ImportToolApiGetStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportToolApiGenerated
     */
    public getStatus(requestParameters: ImportToolApiGetStatusRequest, options?: AxiosRequestConfig) {
        return ImportToolApiFp(this.configuration).getStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits an encoded XML transaction to the Import Tool. Transaction results can be viewed on the Administration > Integration Studio > Import Tool > Results page. Reference the Import Tool XML and Configuration Settings Guide for transaction details. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have the View and Add roles for the Personnel Integration Web Service. This POST call has a requirement of PersonnelResourceAuthorize(ApiOperation.Create)
     * @summary Takes an XML transaction and feeds it into the Import Tool
     * @param {ImportToolApiPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImportToolApiGenerated
     */
    public post(requestParameters: ImportToolApiPostRequest, options?: AxiosRequestConfig) {
        return ImportToolApiFp(this.configuration).post(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
