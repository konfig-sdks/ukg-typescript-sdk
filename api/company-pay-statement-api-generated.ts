/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CompanyPayStatementFilter } from '../models';
// @ts-ignore
import { CompanyPayStatementModel } from '../models';
// @ts-ignore
import { EmployeePayStatementModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CompanyPayStatementApi - axios parameter creator
 * @export
 */
export const CompanyPayStatementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This method returns zero or more full pay statement documents for a given start date and end date. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee(s) pay statement(s) for a company or pay group for a given date range.
         * @param {CompanyPayStatementFilter} companyPayStatementFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDateRange: async (companyPayStatementFilter: CompanyPayStatementFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyPayStatementFilter' is not null or undefined
            assertParamExists('getByDateRange', 'companyPayStatementFilter', companyPayStatementFilter)
            const localVarPath = `/payroll/v1/companies/pay-statements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companyPayStatementFilter,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v1/companies/pay-statements',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companyPayStatementFilter, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This method returns zero or more pay statement summaries for a given start date and end date. The pay summary information gives you a quick view of the total earnings, deductions and taxes. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee(s) pay statement(s) summary for a company or pay group for a given date range.
         * @param {CompanyPayStatementFilter} companyPayStatementFilter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaySummaries: async (companyPayStatementFilter: CompanyPayStatementFilter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyPayStatementFilter' is not null or undefined
            assertParamExists('getPaySummaries', 'companyPayStatementFilter', companyPayStatementFilter)
            const localVarPath = `/payroll/v1/companies/pay-statements-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: companyPayStatementFilter,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payroll/v1/companies/pay-statements-summary',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(companyPayStatementFilter, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyPayStatementApi - functional programming interface
 * @export
 */
export const CompanyPayStatementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyPayStatementApiAxiosParamCreator(configuration)
    return {
        /**
         * This method returns zero or more full pay statement documents for a given start date and end date. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee(s) pay statement(s) for a company or pay group for a given date range.
         * @param {CompanyPayStatementApiGetByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getByDateRange(requestParameters: CompanyPayStatementApiGetByDateRangeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeePayStatementModel>>> {
            const companyPayStatementFilter: CompanyPayStatementFilter = {
                companyId: requestParameters.companyId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                payGroup: requestParameters.payGroup,
                page: requestParameters.page,
                per_Page: requestParameters.per_Page,
                pagesCount: requestParameters.pagesCount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getByDateRange(companyPayStatementFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This method returns zero or more pay statement summaries for a given start date and end date. The pay summary information gives you a quick view of the total earnings, deductions and taxes. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee(s) pay statement(s) summary for a company or pay group for a given date range.
         * @param {CompanyPayStatementApiGetPaySummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaySummaries(requestParameters: CompanyPayStatementApiGetPaySummariesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyPayStatementModel>>> {
            const companyPayStatementFilter: CompanyPayStatementFilter = {
                companyId: requestParameters.companyId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate,
                payGroup: requestParameters.payGroup,
                page: requestParameters.page,
                per_Page: requestParameters.per_Page,
                pagesCount: requestParameters.pagesCount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaySummaries(companyPayStatementFilter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyPayStatementApi - factory interface
 * @export
 */
export const CompanyPayStatementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyPayStatementApiFp(configuration)
    return {
        /**
         * This method returns zero or more full pay statement documents for a given start date and end date. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee(s) pay statement(s) for a company or pay group for a given date range.
         * @param {CompanyPayStatementApiGetByDateRangeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByDateRange(requestParameters: CompanyPayStatementApiGetByDateRangeRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeePayStatementModel>> {
            return localVarFp.getByDateRange(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This method returns zero or more pay statement summaries for a given start date and end date. The pay summary information gives you a quick view of the total earnings, deductions and taxes. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
         * @summary Get employee(s) pay statement(s) summary for a company or pay group for a given date range.
         * @param {CompanyPayStatementApiGetPaySummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaySummaries(requestParameters: CompanyPayStatementApiGetPaySummariesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CompanyPayStatementModel>> {
            return localVarFp.getPaySummaries(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getByDateRange operation in CompanyPayStatementApi.
 * @export
 * @interface CompanyPayStatementApiGetByDateRangeRequest
 */
export type CompanyPayStatementApiGetByDateRangeRequest = {
    
} & CompanyPayStatementFilter

/**
 * Request parameters for getPaySummaries operation in CompanyPayStatementApi.
 * @export
 * @interface CompanyPayStatementApiGetPaySummariesRequest
 */
export type CompanyPayStatementApiGetPaySummariesRequest = {
    
} & CompanyPayStatementFilter

/**
 * CompanyPayStatementApiGenerated - object-oriented interface
 * @export
 * @class CompanyPayStatementApiGenerated
 * @extends {BaseAPI}
 */
export class CompanyPayStatementApiGenerated extends BaseAPI {
    /**
     * This method returns zero or more full pay statement documents for a given start date and end date. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     * @summary Get employee(s) pay statement(s) for a company or pay group for a given date range.
     * @param {CompanyPayStatementApiGetByDateRangeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyPayStatementApiGenerated
     */
    public getByDateRange(requestParameters: CompanyPayStatementApiGetByDateRangeRequest, options?: AxiosRequestConfig) {
        return CompanyPayStatementApiFp(this.configuration).getByDateRange(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This method returns zero or more pay statement summaries for a given start date and end date. The pay summary information gives you a quick view of the total earnings, deductions and taxes. You may also pass in a PayGroup or CompanyIdentifer to further filter the list of pay summaries returned. <br />If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Employee Pay Statements\" Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     * @summary Get employee(s) pay statement(s) summary for a company or pay group for a given date range.
     * @param {CompanyPayStatementApiGetPaySummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyPayStatementApiGenerated
     */
    public getPaySummaries(requestParameters: CompanyPayStatementApiGetPaySummariesRequest, options?: AxiosRequestConfig) {
        return CompanyPayStatementApiFp(this.configuration).getPaySummaries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
