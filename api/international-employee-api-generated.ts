/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InternationalEmployeeModel } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InternationalEmployeeApi - axios parameter creator
 * @export
 */
export const InternationalEmployeeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all international employee details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get international employee details for all employees
         * @param {string} [countryCode] 
         * @param {string} [effectiveDate] 
         * @param {string} [employeeId] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (countryCode?: string, effectiveDate?: string, employeeId?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/personnel/v1/international-employees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = effectiveDate;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/international-employees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a single employees international details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get a single employees international details
         * @param {string} employeeId 
         * @param {string} [countryCode] 
         * @param {string} [effectiveDate] 
         * @param {string} [employeeId2] 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (employeeId: string, countryCode?: string, effectiveDate?: string, employeeId2?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getDetails', 'employeeId', employeeId)
            const localVarPath = `/personnel/v1/international-employees/{employeeId}`
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (countryCode !== undefined) {
                localVarQueryParameter['countryCode'] = countryCode;
            }

            if (effectiveDate !== undefined) {
                localVarQueryParameter['effectiveDate'] = effectiveDate;
            }

            if (employeeId2 !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId2;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/international-employees/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternationalEmployeeApi - functional programming interface
 * @export
 */
export const InternationalEmployeeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InternationalEmployeeApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all international employee details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get international employee details for all employees
         * @param {InternationalEmployeeApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: InternationalEmployeeApiGetRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InternationalEmployeeModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.countryCode, requestParameters.effectiveDate, requestParameters.employeeId, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a single employees international details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get a single employees international details
         * @param {InternationalEmployeeApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: InternationalEmployeeApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InternationalEmployeeModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.employeeId, requestParameters.countryCode, requestParameters.effectiveDate, requestParameters.employeeId2, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InternationalEmployeeApi - factory interface
 * @export
 */
export const InternationalEmployeeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InternationalEmployeeApiFp(configuration)
    return {
        /**
         * Get all international employee details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get international employee details for all employees
         * @param {InternationalEmployeeApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: InternationalEmployeeApiGetRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<InternationalEmployeeModel>> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a single employees international details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
         * @summary Get a single employees international details
         * @param {InternationalEmployeeApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: InternationalEmployeeApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<InternationalEmployeeModel>> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for get operation in InternationalEmployeeApi.
 * @export
 * @interface InternationalEmployeeApiGetRequest
 */
export type InternationalEmployeeApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InternationalEmployeeApiGet
    */
    readonly countryCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof InternationalEmployeeApiGet
    */
    readonly effectiveDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof InternationalEmployeeApiGet
    */
    readonly employeeId?: string
    
    /**
    * 
    * @type {number}
    * @memberof InternationalEmployeeApiGet
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof InternationalEmployeeApiGet
    */
    readonly perPage?: number
    
}

/**
 * Request parameters for getDetails operation in InternationalEmployeeApi.
 * @export
 * @interface InternationalEmployeeApiGetDetailsRequest
 */
export type InternationalEmployeeApiGetDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof InternationalEmployeeApiGetDetails
    */
    readonly employeeId: string
    
    /**
    * 
    * @type {string}
    * @memberof InternationalEmployeeApiGetDetails
    */
    readonly countryCode?: string
    
    /**
    * 
    * @type {string}
    * @memberof InternationalEmployeeApiGetDetails
    */
    readonly effectiveDate?: string
    
    /**
    * 
    * @type {string}
    * @memberof InternationalEmployeeApiGetDetails
    */
    readonly employeeId2?: string
    
    /**
    * 
    * @type {number}
    * @memberof InternationalEmployeeApiGetDetails
    */
    readonly page?: number
    
    /**
    * 
    * @type {number}
    * @memberof InternationalEmployeeApiGetDetails
    */
    readonly perPage?: number
    
}

/**
 * InternationalEmployeeApiGenerated - object-oriented interface
 * @export
 * @class InternationalEmployeeApiGenerated
 * @extends {BaseAPI}
 */
export class InternationalEmployeeApiGenerated extends BaseAPI {
    /**
     * Get all international employee details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @summary Get international employee details for all employees
     * @param {InternationalEmployeeApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternationalEmployeeApiGenerated
     */
    public get(requestParameters: InternationalEmployeeApiGetRequest = {}, options?: AxiosRequestConfig) {
        return InternationalEmployeeApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a single employees international details. If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @summary Get a single employees international details
     * @param {InternationalEmployeeApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternationalEmployeeApiGenerated
     */
    public getDetails(requestParameters: InternationalEmployeeApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return InternationalEmployeeApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
