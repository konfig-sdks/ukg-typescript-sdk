/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeIdsResponse } from '../models';
// @ts-ignore
import { Identifiers } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeIdLookupApi - axios parameter creator
 * @export
 */
export const EmployeeIdLookupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Look up Employee ID/Company ID. This operation is a POST due the sensitive nature of the lookup properties not appropriate for URI. This service also supports multiple records to be looked up in the body of the request (array of Identifier objects). Permissions - Ultipro service account must have the \"View\" and \"Add\" roles for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})
         * @summary Employee ID Lookup
         * @param {Array<Identifiers>} identifiers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byCompanyIds: async (identifiers: Array<Identifiers>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identifiers' is not null or undefined
            assertParamExists('byCompanyIds', 'identifiers', identifiers)
            const localVarPath = `/personnel/v1/employee-ids`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: identifiers,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v1/employee-ids',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(identifiers, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeIdLookupApi - functional programming interface
 * @export
 */
export const EmployeeIdLookupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeIdLookupApiAxiosParamCreator(configuration)
    return {
        /**
         * Look up Employee ID/Company ID. This operation is a POST due the sensitive nature of the lookup properties not appropriate for URI. This service also supports multiple records to be looked up in the body of the request (array of Identifier objects). Permissions - Ultipro service account must have the \"View\" and \"Add\" roles for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})
         * @summary Employee ID Lookup
         * @param {EmployeeIdLookupApiByCompanyIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async byCompanyIds(requestParameters: EmployeeIdLookupApiByCompanyIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeIdsResponse>>> {
            const identifiers: Array<Identifiers> = requestParameters;
            const localVarAxiosArgs = await localVarAxiosParamCreator.byCompanyIds(identifiers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeIdLookupApi - factory interface
 * @export
 */
export const EmployeeIdLookupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeIdLookupApiFp(configuration)
    return {
        /**
         * Look up Employee ID/Company ID. This operation is a POST due the sensitive nature of the lookup properties not appropriate for URI. This service also supports multiple records to be looked up in the body of the request (array of Identifier objects). Permissions - Ultipro service account must have the \"View\" and \"Add\" roles for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})
         * @summary Employee ID Lookup
         * @param {EmployeeIdLookupApiByCompanyIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        byCompanyIds(requestParameters: EmployeeIdLookupApiByCompanyIdsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeIdsResponse>> {
            return localVarFp.byCompanyIds(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for byCompanyIds operation in EmployeeIdLookupApi.
 * @export
 * @interface EmployeeIdLookupApiByCompanyIdsRequest
 */
export type EmployeeIdLookupApiByCompanyIdsRequest = Array<Identifiers>

/**
 * EmployeeIdLookupApiGenerated - object-oriented interface
 * @export
 * @class EmployeeIdLookupApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeIdLookupApiGenerated extends BaseAPI {
    /**
     * Look up Employee ID/Company ID. This operation is a POST due the sensitive nature of the lookup properties not appropriate for URI. This service also supports multiple records to be looked up in the body of the request (array of Identifier objects). Permissions - Ultipro service account must have the \"View\" and \"Add\" roles for the \"Personnel Integration\" Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})
     * @summary Employee ID Lookup
     * @param {EmployeeIdLookupApiByCompanyIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeIdLookupApiGenerated
     */
    public byCompanyIds(requestParameters: EmployeeIdLookupApiByCompanyIdsRequest, options?: AxiosRequestConfig) {
        return EmployeeIdLookupApiFp(this.configuration).byCompanyIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
