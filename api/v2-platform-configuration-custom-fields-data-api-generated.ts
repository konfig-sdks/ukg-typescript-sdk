/* tslint:disable */
/* eslint-disable */
/*
User Profile Details

Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { UltimateSoftwareFoundationServicesApiUltiProPersonnelPlatformConfigurationV2ModelsPcData } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * V2PlatformConfigurationCustomFieldsDataApi - axios parameter creator
 * @export
 */
export const V2PlatformConfigurationCustomFieldsDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API is similar to the v1 Platform Configuration Fields className API with added support of filtering data by KeyValue. The fields and keyValues are dependent on the class in question - expected key values are listed along with the supported classes below.<br />   This API uses pre-defined Views in the UKG Pro database to retrieve the data whereas the v1 version of this API uses functions to retrieve the data.<br />UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service.<br /><b>Supported classes</b>:<br />  1. Address (takes value of an employee Id as keyValue)<br />  2. Person (takes value of an employee Id as keyValue)<br />  3. Employee (takes value of an employee Id as keyValue)<br />  4. PhoneNumber (takes value of an employee Id as keyValue)<br />  5. Employment (takes value of an employee Id and a company code as keyValue. Accepted format for keyValue <b>employeeId:companyCode</b>)<br />  6. Location (takes value of a location code as keyValue)<br />  7. Job (takes value of a job code as keyValue)<br />  8. OrgLevel1 (takes value of an org code as keyValue)<br />  9. OrgLevel2 (takes value of an org code as keyValue)<br />  10. OrgLevel3 (takes value of an org code as keyValue)<br />  11. OrgLevel4 (takes value of an org code as keyValue)<br />  12. InternationalEmployee (takes value of an employee Id and a country code as keyValue. Accepted format for keyValue <b>employeeId:countryCode</b>)<br />  13. Contacts (takes value of a SystemId as keyValue)<br /><br /><b>Classes NOT supported</b>:<br />  1. ComponentCompany<br />  2. PersonNames (fields of this class are available in class Person)<br />
         * @summary Platform Configuration Fields Data v2
         * @param {string} className The name of a supported class, as listed above, to pull custom fields from.
         * @param {string} [fields] The exact name of a custom field or fields in a comma seperated list. Filters results to only fields with those names.
         * @param {string} [keyValue] keyValue to filter results by, allowing filtering by specific Ids. This value is dependent on the className, as listed in the implementation notes.
         * @param {number} [page] Offsets results. Used with page number to allow filtering results to a certain range of custom fields.
         * @param {number} [perPage] Offsets results. Used with page to allow filtering results to a certain range of custom fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFieldsData: async (className: string, fields?: string, keyValue?: string, page?: number, perPage?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'className' is not null or undefined
            assertParamExists('getFieldsData', 'className', className)
            const localVarPath = `/personnel/v2/platform-configuration-fields/class-name/{className}`
                .replace(`{${"className"}}`, encodeURIComponent(String(className !== undefined ? className : `-className-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OauthSecurity required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OauthSecurity", ["recruiting.domain.third-party-job-board-integrations.auto-feed"], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (keyValue !== undefined) {
                localVarQueryParameter['keyValue'] = keyValue;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_Page'] = perPage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/personnel/v2/platform-configuration-fields/class-name/{className}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V2PlatformConfigurationCustomFieldsDataApi - functional programming interface
 * @export
 */
export const V2PlatformConfigurationCustomFieldsDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V2PlatformConfigurationCustomFieldsDataApiAxiosParamCreator(configuration)
    return {
        /**
         * This API is similar to the v1 Platform Configuration Fields className API with added support of filtering data by KeyValue. The fields and keyValues are dependent on the class in question - expected key values are listed along with the supported classes below.<br />   This API uses pre-defined Views in the UKG Pro database to retrieve the data whereas the v1 version of this API uses functions to retrieve the data.<br />UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service.<br /><b>Supported classes</b>:<br />  1. Address (takes value of an employee Id as keyValue)<br />  2. Person (takes value of an employee Id as keyValue)<br />  3. Employee (takes value of an employee Id as keyValue)<br />  4. PhoneNumber (takes value of an employee Id as keyValue)<br />  5. Employment (takes value of an employee Id and a company code as keyValue. Accepted format for keyValue <b>employeeId:companyCode</b>)<br />  6. Location (takes value of a location code as keyValue)<br />  7. Job (takes value of a job code as keyValue)<br />  8. OrgLevel1 (takes value of an org code as keyValue)<br />  9. OrgLevel2 (takes value of an org code as keyValue)<br />  10. OrgLevel3 (takes value of an org code as keyValue)<br />  11. OrgLevel4 (takes value of an org code as keyValue)<br />  12. InternationalEmployee (takes value of an employee Id and a country code as keyValue. Accepted format for keyValue <b>employeeId:countryCode</b>)<br />  13. Contacts (takes value of a SystemId as keyValue)<br /><br /><b>Classes NOT supported</b>:<br />  1. ComponentCompany<br />  2. PersonNames (fields of this class are available in class Person)<br />
         * @summary Platform Configuration Fields Data v2
         * @param {V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFieldsData(requestParameters: V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UltimateSoftwareFoundationServicesApiUltiProPersonnelPlatformConfigurationV2ModelsPcData>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFieldsData(requestParameters.className, requestParameters.fields, requestParameters.keyValue, requestParameters.page, requestParameters.perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V2PlatformConfigurationCustomFieldsDataApi - factory interface
 * @export
 */
export const V2PlatformConfigurationCustomFieldsDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V2PlatformConfigurationCustomFieldsDataApiFp(configuration)
    return {
        /**
         * This API is similar to the v1 Platform Configuration Fields className API with added support of filtering data by KeyValue. The fields and keyValues are dependent on the class in question - expected key values are listed along with the supported classes below.<br />   This API uses pre-defined Views in the UKG Pro database to retrieve the data whereas the v1 version of this API uses functions to retrieve the data.<br />UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service.<br /><b>Supported classes</b>:<br />  1. Address (takes value of an employee Id as keyValue)<br />  2. Person (takes value of an employee Id as keyValue)<br />  3. Employee (takes value of an employee Id as keyValue)<br />  4. PhoneNumber (takes value of an employee Id as keyValue)<br />  5. Employment (takes value of an employee Id and a company code as keyValue. Accepted format for keyValue <b>employeeId:companyCode</b>)<br />  6. Location (takes value of a location code as keyValue)<br />  7. Job (takes value of a job code as keyValue)<br />  8. OrgLevel1 (takes value of an org code as keyValue)<br />  9. OrgLevel2 (takes value of an org code as keyValue)<br />  10. OrgLevel3 (takes value of an org code as keyValue)<br />  11. OrgLevel4 (takes value of an org code as keyValue)<br />  12. InternationalEmployee (takes value of an employee Id and a country code as keyValue. Accepted format for keyValue <b>employeeId:countryCode</b>)<br />  13. Contacts (takes value of a SystemId as keyValue)<br /><br /><b>Classes NOT supported</b>:<br />  1. ComponentCompany<br />  2. PersonNames (fields of this class are available in class Person)<br />
         * @summary Platform Configuration Fields Data v2
         * @param {V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFieldsData(requestParameters: V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UltimateSoftwareFoundationServicesApiUltiProPersonnelPlatformConfigurationV2ModelsPcData>> {
            return localVarFp.getFieldsData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getFieldsData operation in V2PlatformConfigurationCustomFieldsDataApi.
 * @export
 * @interface V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest
 */
export type V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest = {
    
    /**
    * The name of a supported class, as listed above, to pull custom fields from.
    * @type {string}
    * @memberof V2PlatformConfigurationCustomFieldsDataApiGetFieldsData
    */
    readonly className: string
    
    /**
    * The exact name of a custom field or fields in a comma seperated list. Filters results to only fields with those names.
    * @type {string}
    * @memberof V2PlatformConfigurationCustomFieldsDataApiGetFieldsData
    */
    readonly fields?: string
    
    /**
    * keyValue to filter results by, allowing filtering by specific Ids. This value is dependent on the className, as listed in the implementation notes.
    * @type {string}
    * @memberof V2PlatformConfigurationCustomFieldsDataApiGetFieldsData
    */
    readonly keyValue?: string
    
    /**
    * Offsets results. Used with page number to allow filtering results to a certain range of custom fields.
    * @type {number}
    * @memberof V2PlatformConfigurationCustomFieldsDataApiGetFieldsData
    */
    readonly page?: number
    
    /**
    * Offsets results. Used with page to allow filtering results to a certain range of custom fields.
    * @type {number}
    * @memberof V2PlatformConfigurationCustomFieldsDataApiGetFieldsData
    */
    readonly perPage?: number
    
}

/**
 * V2PlatformConfigurationCustomFieldsDataApiGenerated - object-oriented interface
 * @export
 * @class V2PlatformConfigurationCustomFieldsDataApiGenerated
 * @extends {BaseAPI}
 */
export class V2PlatformConfigurationCustomFieldsDataApiGenerated extends BaseAPI {
    /**
     * This API is similar to the v1 Platform Configuration Fields className API with added support of filtering data by KeyValue. The fields and keyValues are dependent on the class in question - expected key values are listed along with the supported classes below.<br />   This API uses pre-defined Views in the UKG Pro database to retrieve the data whereas the v1 version of this API uses functions to retrieve the data.<br />UKG Pro service account must have \"View\" role for the \"Personnel Integration\" Web Service.<br /><b>Supported classes</b>:<br />  1. Address (takes value of an employee Id as keyValue)<br />  2. Person (takes value of an employee Id as keyValue)<br />  3. Employee (takes value of an employee Id as keyValue)<br />  4. PhoneNumber (takes value of an employee Id as keyValue)<br />  5. Employment (takes value of an employee Id and a company code as keyValue. Accepted format for keyValue <b>employeeId:companyCode</b>)<br />  6. Location (takes value of a location code as keyValue)<br />  7. Job (takes value of a job code as keyValue)<br />  8. OrgLevel1 (takes value of an org code as keyValue)<br />  9. OrgLevel2 (takes value of an org code as keyValue)<br />  10. OrgLevel3 (takes value of an org code as keyValue)<br />  11. OrgLevel4 (takes value of an org code as keyValue)<br />  12. InternationalEmployee (takes value of an employee Id and a country code as keyValue. Accepted format for keyValue <b>employeeId:countryCode</b>)<br />  13. Contacts (takes value of a SystemId as keyValue)<br /><br /><b>Classes NOT supported</b>:<br />  1. ComponentCompany<br />  2. PersonNames (fields of this class are available in class Person)<br />
     * @summary Platform Configuration Fields Data v2
     * @param {V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V2PlatformConfigurationCustomFieldsDataApiGenerated
     */
    public getFieldsData(requestParameters: V2PlatformConfigurationCustomFieldsDataApiGetFieldsDataRequest, options?: AxiosRequestConfig) {
        return V2PlatformConfigurationCustomFieldsDataApiFp(this.configuration).getFieldsData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
